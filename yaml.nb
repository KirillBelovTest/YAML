(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Wolfram 14.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       154,          7]
NotebookDataLength[   1077138,      19448]
NotebookOptionsPosition[   1073705,      19384]
NotebookOutlinePosition[   1074107,      19400]
CellTagsIndexPosition[   1074064,      19397]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.9182158919699383`*^9, 3.9182158923488884`*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"b56d3844-6acd-4fe4-b2fc-18aa3827c100"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PacletDirectoryLoad", "[", "\"\<~/yaml/YAML\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.918215029185225*^9, 3.918215035951198*^9}, {
  3.918217578067159*^9, 3.918217580677343*^9}, {3.918226622135651*^9, 
  3.918226631582321*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"ec7d7c1d-9910-4e3e-bfcd-4ca7d4a139ab"],

Cell[BoxData[
 RowBox[{"{", "\<\"/Users/arnoudb/yaml/YAML\"\>", "}"}]], "Output",
 CellChangeTimes->{3.918226632381674*^9, 3.918231631794257*^9, 
  3.918231817445118*^9, 3.918232117050109*^9, 3.918232208532505*^9, 
  3.918232371743202*^9, 3.918232421600566*^9, 3.9182330215050573`*^9, 
  3.918233230888776*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"fa41b372-f610-474b-bafb-70dc6cef8dd3"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Get", "[", "\"\<WolframExternalFunctions`YAML`\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.918226634592758*^9, 3.918226646842224*^9}, {
  3.918226712557087*^9, 3.918226712910165*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"ebb6d589-c93d-4ce4-b7fe-9e3853922e16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"PacletObject", "[", "\"\<WolframExternalFunctions/YAML\>\"", "]"}],
   "[", 
  RowBox[{"\"\<AssetLocation\>\"", ",", "\"\<example.yaml\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.918233138596394*^9, 3.918233159133926*^9}, {
  3.9182332349813423`*^9, 3.918233235932659*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"a3b0201a-3785-4d9a-902f-331c36ea9bce"],

Cell[BoxData["\<\"/Users/arnoudb/yaml/YAML/Assets/example.yaml\"\>"], "Output",
 CellChangeTimes->{{3.9182331482993097`*^9, 3.918233159503186*^9}, 
   3.9182332362886477`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"0e9b14df-f080-4a93-91cc-13aef256d1d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PacletManager`PacletResources", "[", "\"\<Asset\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.9182330369866953`*^9, 3.9182331008339767`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"3d06829f-984f-4da9-9753-16e3c46fe18b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"WolframExternalFunctions/YAML\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.0.0\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"WolframExternalFunctions/YAML\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.0.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"/Users/arnoudb/yaml/YAML\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"A package for reading and writing YAML files\"", 
                    Short], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "WolframExternalFunctions/YAML", "Description" -> 
        "A package for reading and writing YAML files", "Creator" -> 
        "Arnoud Buzing", "Version" -> "1.0.0", "WolframVersion" -> "14.0+", 
        "PublisherID" -> "WolframExternalFunctions", "License" -> "MIT", 
        "PrimaryContext" -> "WolframExternalFunctions`YAML`", 
        "DocumentationURL" -> "", 
        "Extensions" -> {{
          "Kernel", "Root" -> "Kernel", 
           "Context" -> {"WolframExternalFunctions`YAML`"}, 
           "Symbols" -> {
            "WolframExternalFunctions`YAML`YAMLImport", 
             "WolframExternalFunctions`YAML`YAMLExport"}}, {
          "Documentation", "Root" -> "Documentation", "Language" -> 
           "English"}, {
          "Asset", "Root" -> "Assets", 
           "Assets" -> {{"example", "example.yaml"}}}}, "Location" -> 
        "/Users/arnoudb/yaml/YAML"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{"{", "\<\"/Users/arnoudb/yaml/YAML/Assets\"\>", "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"QuestionFramework\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.8.1\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"QuestionFramework\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.8.1\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/QuestionFramework\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"Create questions for quizzes, surveys, and assessments\
\"", Short], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "QuestionFramework", "Version" -> "1.8.1", 
        "MathematicaVersion" -> "13.3+", "Description" -> 
        "Create questions for quizzes, surveys, and assessments", "Creator" -> 
        "Bob Sandheinrich, Christophe Pakleza, Sylvia Haas, Jon McLoone, \
Gerli Jogeva, Wolfram Research", "Loading" -> Automatic, "AutoUpdating" -> 
        True, "Extensions" -> {{
          "Kernel", 
           "Symbols" -> {
            "System`AssessmentFunction", "System`AssessmentResultObject", 
             "System`QuestionObject", "System`QuestionInterface", 
             "QuestionFramework`QuestionDeploy", "System`QuestionGenerator", 
             "System`QuestionSelector"}, "Root" -> "Kernel", 
           "Context" -> {"QuestionFramework`"}, "HiddenImport" -> 
           "QuestionFramework`"}, {
          "Resource", "Root" -> "Resources", 
           "Resources" -> {
            "aro-checkmark.png", "aro-x.png", "aro-unknown.png", 
             "assessmentfunctionicon.png", "Icons.wl", "q-code-label.png", 
             "q-gui-label.png"}}, {
          "FrontEnd", "Prepend" -> True, "Root" -> "FrontEnd"}, {
          "FrontEnd", "Prepend" -> True, "Root" -> "FrontEndStyles"}, {
          "Asset", "Assets" -> {{"SymbolNames", "./Data"}}}}, "Location" -> 
        "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/QuestionFramework"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/QuestionFramework\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"RobertNachbar/CompartmentalModeling\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.11.0\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"RobertNachbar/CompartmentalModeling\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.11.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
RobertNachbar__CompartmentalModeling-1.11.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"Build, visualize, analyze, and simulate compartmental \
models\"", Short], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "RobertNachbar/CompartmentalModeling", "Description" -> 
        "Build, visualize, analyze, and simulate compartmental models", 
        "Creator" -> "rnachbar@wolfram.com", "License" -> "MIT", 
        "PublisherID" -> "RobertNachbar", "Version" -> "1.11.0", 
        "WolframVersion" -> "12.1+", 
        "Extensions" -> {{"Documentation", "Language" -> "English"}, {
          "Kernel", "Root" -> "Kernel", 
           "Context" -> {
            "RobertNachbar`CompartmentalModeling`", 
             "RobertNachbar`EpidemiologyModeling`", 
             "RobertNachbar`EpidemiologyModels`", 
             "RobertNachbar`SystemsBiologyModeling`"}, 
           "Symbols" -> {
            "RobertNachbar`CompartmentalModeling`$C", 
             "RobertNachbar`CompartmentalModeling`$\
CompartmentalModelingVersion", "RobertNachbar`CompartmentalModeling`$R", 
             "RobertNachbar`CompartmentalModeling`CompartmentalModelGraph", 
             "RobertNachbar`CompartmentalModeling`DefinePropensityFunction", 
             "RobertNachbar`CompartmentalModeling`DeriveTransitions", 
             "RobertNachbar`CompartmentalModeling`KineticCompartmentalModel", 
             "RobertNachbar`CompartmentalModeling`NullCompartment", 
             "RobertNachbar`CompartmentalModeling`ResolveCompartmentalModel", 
             "RobertNachbar`CompartmentalModeling`StochasticSolve", 
             "RobertNachbar`CompartmentalModeling`StoichiometryTable", 
             "RobertNachbar`CompartmentalModeling`Transition", 
             "RobertNachbar`EpidemiologyModeling`$EpidemiologyColor", 
             "RobertNachbar`EpidemiologyModeling`$\
EpidemiologyModelingVersion", 
             "RobertNachbar`EpidemiologyModeling`CollectModel", 
             "RobertNachbar`EpidemiologyModeling`DynamicTransmissionModel", 
             "RobertNachbar`EpidemiologyModeling`EpidemiologyModel", 
             "RobertNachbar`EpidemiologyModeling`EpidemiologyModelData", 
             "RobertNachbar`EpidemiologyModeling`ExpandModel", 
             "RobertNachbar`EpidemiologyModeling`ForceOfInfection", 
             "RobertNachbar`EpidemiologyModeling`Incidence", 
             "RobertNachbar`EpidemiologyModeling`NextGenerationMatrix", 
             "RobertNachbar`EpidemiologyModeling`StratifyModel", 
             "RobertNachbar`EpidemiologyModeling`VitalDemographicsModel", 
             "RobertNachbar`SystemsBiologyModeling`$\
SystemsBiologyModelingVersion", 
             "RobertNachbar`SystemsBiologyModeling`\
CompetitiveInhibitorKinetics", 
             "RobertNachbar`SystemsBiologyModeling`EnzymeReaction", 
             "RobertNachbar`SystemsBiologyModeling`HillKinetics", 
             "RobertNachbar`SystemsBiologyModeling`\
KineticReactionNetworkModel", 
             "RobertNachbar`SystemsBiologyModeling`MichaelisMentenKinetics", 
             "RobertNachbar`SystemsBiologyModeling`\
NoncompetitiveInhibitorKinetics", 
             "RobertNachbar`SystemsBiologyModeling`\
UncompetitiveInhibitorKinetics"}}, {
          "Asset", "Assets" -> {{"License", "LICENSE.txt"}}}}, "Location" -> 
        "/Users/arnoudb/Library/Mathematica/Paclets/Repository/RobertNachbar__\
CompartmentalModeling-1.11.0"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
RobertNachbar__CompartmentalModeling-1.11.0\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ServiceConnection_IBMQ\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0.0.1\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ServiceConnection_IBMQ\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"0.0.1\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
ServiceConnection_IBMQ-0.0.1\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"Missing", "[", "\"NotAvailable\"", "]"}], Short],
                     "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "ServiceConnection_IBMQ", "Version" -> "0.0.1", 
        "MathematicaVersion" -> "10+", 
        "Extensions" -> {{
          "Kernel", "Root" -> "Kernel", "Context" -> {"Wolfram`IBMQLoad`"}}, {
          "Asset", "Root" -> "Assets", 
           "Assets" -> {{"logo", "IBM_Quantum_logotype_pos_RGB.png"}}}}, 
        "Location" -> 
        "/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
ServiceConnection_IBMQ-0.0.1"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
ServiceConnection_IBMQ-0.0.1/Assets\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/Chatbook\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.4.0\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/Chatbook\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.4.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
Wolfram__Chatbook-1.4.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox["\"Wolfram Notebooks + LLMs\"", Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "Wolfram/Chatbook", "PublisherID" -> "Wolfram", "Version" -> 
        "1.4.0", "WolframVersion" -> "13.3+", "Description" -> 
        "Wolfram Notebooks + LLMs", "License" -> "MIT", "Creator" -> 
        "Connor Gray, Theodore Gray, Richard Hennigan", "Icon" -> 
        "Assets/Images/PacletIcon.png", "ReleaseID" -> 
        "00db891fc2d1dd712145aa46464ded3b71633f75", "ReleaseDate" -> 
        "2024-01-06T21:51:04Z", "ReleaseURL" -> 
        "https://github.com/WolframResearch/Chatbook/releases/tag/v1.4.0", 
        "ActionURL" -> 
        "https://github.com/WolframResearch/Chatbook/actions/runs/7434115990",
         "CommitURL" -> 
        "https://github.com/WolframResearch/Chatbook/commit/\
00db891fc2d1dd712145aa46464ded3b71633f75", "Loading" -> "Startup", 
        "PrimaryContext" -> "Wolfram`Chatbook`", 
        "Extensions" -> {{
          "Kernel", "Root" -> "Source/Startup/Begin", "Context" -> 
           "Wolfram`Chatbook`BeginStartup`"}, {
          "Kernel", "Root" -> "Source/Chatbook", "Context" -> 
           "Wolfram`Chatbook`"}, {
          "Kernel", "Root" -> "Source/Startup/End", "Context" -> 
           "Wolfram`Chatbook`EndStartup`"}, {
          "Asset", "Root" -> "Assets", 
           "Assets" -> {{"Icons", "Icons.wxf"}, {
             "DisplayFunctions", "DisplayFunctions.wxf"}, {
             "AIAssistant", "AIAssistant"}, {
             "SandboxMessages", "SandboxMessages.wl"}}}, {
          "LLMConfiguration", 
           "Personas" -> {
            "PlainChat", "CodeAssistant", "CodeWriter", "RawModel", "Wolfie", 
             "Birdnardo"}}, {"FrontEnd", "Prepend" -> True}}, "Location" -> 
        "/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
Chatbook-1.4.0"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
Chatbook-1.4.0/Assets\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[
                 TagBox[
                  RasterBox[CompressedData["
1:eJztmXts01UUxycaMQRRiQQlMCS8BVEQiEAUAUUNBBFEEpHHFsdDZSjIy6gD
JTIeAlMRlogS57bu/WBuXcBM3ZjxQZyb7SRI13ZjXWnX59atXdvj/V76q3v+
Rkd/hT96ksMu5557ez+95557fr+Oit6ybH2/iIiIbXexf5ZF7Zy3dWvU7uX3
sv+siN22aUNszOsvxL4bsyFm6xPRtzPjdJ/eERGWsIQlLGEJy60tKSkpU2Qy
2UdMD0mt6enpB5mujouL6ycFS2pq6oK0tLQ29hkUSmVsKVLwsLl/YNqm1+vJ
ZrNJrhaLhUpKSprAlJycPDbYPGxv/srJybFSCEWpVDrBw2JjthQ8ubm59hDz
tEnM09yXddnSksiW/l1feNxS8uTl5bUEuiaP3U6aKQ+R5tFR5GlqCpTHIyVP
fn6+U+zzjR9uJ3tOOnndbr+tce8ubjfG7WDt3X47fOy5GdwuwuOVmKdNjKch
eiVdvi+CNI+MJPNnh6j1zz9428PyFRT7BBv6YIcvxvQk1dXVFAwetvZiNs/V
Tuo+c+aMR4zHsPttUk94kBrWrSDj+9uoZuQ9ZIrf4+9HGzb0Nax9mfsa33un
Vx6WV3G3GqGZmZlVRUVFSwLk+V64z+Ryufvs2bNQT2VlpRgOmRMOUuP+OKqd
M4VsKafJqahk+xBJLk0NV+yJU1HF++ADX4zpjaesrCzn3LlzxNZAWVlZlJGR
gTweeb08CQkJ/RlTJuZiczhcLpcohyDWUyfIsGsL2fMyqWbUYFJPGk7a6eOo
9qmpXNGGDX3wMeyMJevXJ3vluXTpkh9arVZzG1tfdCB7hLqJjUv07VFrS0vX
1NbyazmZv/iUxxe+e+3MCaSZNobs2WmkX/8auU2NfL3a2ZO5og2bPmYV94Ev
H8PGNkS9QubjR6jlt19Eeerr6wWejYHwCMLG7sP4goICl93e8ToFi2r4QGoq
zCO3xcxtpkMfk+bxsZzR73fsQIe4wtmBD3whGIs5MJf588OS8viYtrDx3uLi
4i75GucZa/d6rqUK5OG6hbOo/qVnyev1duGBrX7pM1T33Gx/XsdYnkM65Qap
eHxMld3VO1gfci7OQnNxAV/X5aH9eSwhjrBG/RvrSP9mFG/Dhj74wBdjMBZz
CPyh4PHVO91e8G6jgVTDBpBu1VK+rroFM8nrdJL7qp4sXx0nVeQgrtZTX3Ib
+uADX92rL/Kx7kZjl3lDwNOlfvOy3IfYMh3eR85/lPz7b6vV+PtRt9U9P4fH
V/saDj48f7MxOEf1yxbyuULJw+o3R+dY029YTdoZ43k+qxl9P6knDuP3paO0
hJzVCn7/YO3X1h/JbeiDD+7TmjFD+Fg+x8Y1oebpkLRRm6FmUY24m++Pp7mZ
XFo16Tet5Xao5WSC399y4pjPfhs/U/BFjYqxyG3oa1/jSc3TuR511Vwme0Yy
GXZsprr5M0g9/gF+X15Z/DTnqH3yMX6/eNjd5XE4eBv3KriuLJpL6skjSD1u
KNXOm06G7W/xeHSp/g0lj2ihYEv+pkPOxbm6smQ+r+tQN6ANmyCwo/bpSULA
I1pfm4/u57WzILqVi8hR9iNpZ03i9QHaupWL//dnd5L5aPxN42H1tbvHD8f3
ze4RxB+eCVDTIA8j7vh9yhRxBhvOP3zw3Ip9C4THaDQK734UTIfcII/o8wKv
Y1gOrp07ja8VNTXOCJ7ZoGjDZpN9y3143dauLroeHohCofD69qiC/R18Azze
nj4bYjryCTnKf+5gQwwid/HajLXbi+P8T3xMoDyQqqoqIe5+T0pKGhQoD+od
VpOK4XQr3tZW0kwdzRXtQESMB1JRUSEwnWd/BwbCw56hqvrCA2kqyucaqHTH
42B5nz3b2QsLCxuhrF+IPXmAPIq+8vRVxPIbU3v79wF4RxAID3tu/7u38xNs
USqVAs+BzjxBeF7Iw95evHiRtFqt5KrRaIjFUxNbt8dkMsVLwPMwU0Oof1/I
ysrCQ6wq2Dw+psEymWwF0zWCpqam7pHL5adLS0sPBlPLy8vjVSrVBwi79jEY
TJ4eGMuzs7NF66BgSpgnMGHz5iNP6HQ6yX/jslqtdOHCBeF3u+VS8ODdsu99
ZchyBLs7UIveKQWPj2kim39vKH4nZro5MTFxgFQsYQlLWMJyK8t/v0X8aw==

                   "], {{0, 26.}, {26., 0}}, {0, 255}, ColorFunction -> 
                   RGBColor, ImageResolution -> {144, 144}], 
                  BoxForm`ImageTag[
                  "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                   MetaInformation -> <|
                    "Exif" -> <|
                    "ImageWidth" -> 52, "ImageLength" -> 52, "XResolution" -> 
                    144, "YResolution" -> 144, "ResolutionUnit" -> "Inch", 
                    "Software" -> 
                    "Created with the Wolfram Language : www.wolfram.com", 
                    "DateTime" -> 
                    DateObject[{2023, 4, 12, 9, 33, 53.}, "Instant", 
                    "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
                    "Comments" -> {
                    "Software" -> 
                    "Created with the Wolfram Language : www.wolfram.com", 
                    "Creation Time" -> 
                    DateObject[{2023, 4, 12, 9, 33, 53.}, "Instant", 
                    "Gregorian", None]}|>], Selectable -> False], 
                 DefaultBaseStyle -> "ImageGraphics", 
                 ImageSizeRaw -> {26., 26.}, 
                 PlotRange -> {{0, 26.}, {0, 26.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/LLMFunctions\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.2.6\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[
                 TagBox[
                  RasterBox[CompressedData["
1:eJztmXts01UUxycaMQRRiQQlMCS8BVEQiEAUAUUNBBFEEpHHFsdDZSjIy6gD
JTIeAlMRlogS57bu/WBuXcBM3ZjxQZyb7SRI13ZjXWnX59atXdvj/V76q3v+
Rkd/hT96ksMu5557ez+95557fr+Oit6ybH2/iIiIbXexf5ZF7Zy3dWvU7uX3
sv+siN22aUNszOsvxL4bsyFm6xPRtzPjdJ/eERGWsIQlLGEJy60tKSkpU2Qy
2UdMD0mt6enpB5mujouL6ycFS2pq6oK0tLQ29hkUSmVsKVLwsLl/YNqm1+vJ
ZrNJrhaLhUpKSprAlJycPDbYPGxv/srJybFSCEWpVDrBw2JjthQ8ubm59hDz
tEnM09yXddnSksiW/l1feNxS8uTl5bUEuiaP3U6aKQ+R5tFR5GlqCpTHIyVP
fn6+U+zzjR9uJ3tOOnndbr+tce8ubjfG7WDt3X47fOy5GdwuwuOVmKdNjKch
eiVdvi+CNI+MJPNnh6j1zz9428PyFRT7BBv6YIcvxvQk1dXVFAwetvZiNs/V
Tuo+c+aMR4zHsPttUk94kBrWrSDj+9uoZuQ9ZIrf4+9HGzb0Nax9mfsa33un
Vx6WV3G3GqGZmZlVRUVFSwLk+V64z+Ryufvs2bNQT2VlpRgOmRMOUuP+OKqd
M4VsKafJqahk+xBJLk0NV+yJU1HF++ADX4zpjaesrCzn3LlzxNZAWVlZlJGR
gTweeb08CQkJ/RlTJuZiczhcLpcohyDWUyfIsGsL2fMyqWbUYFJPGk7a6eOo
9qmpXNGGDX3wMeyMJevXJ3vluXTpkh9arVZzG1tfdCB7hLqJjUv07VFrS0vX
1NbyazmZv/iUxxe+e+3MCaSZNobs2WmkX/8auU2NfL3a2ZO5og2bPmYV94Ev
H8PGNkS9QubjR6jlt19Eeerr6wWejYHwCMLG7sP4goICl93e8ToFi2r4QGoq
zCO3xcxtpkMfk+bxsZzR73fsQIe4wtmBD3whGIs5MJf588OS8viYtrDx3uLi
4i75GucZa/d6rqUK5OG6hbOo/qVnyev1duGBrX7pM1T33Gx/XsdYnkM65Qap
eHxMld3VO1gfci7OQnNxAV/X5aH9eSwhjrBG/RvrSP9mFG/Dhj74wBdjMBZz
CPyh4PHVO91e8G6jgVTDBpBu1VK+rroFM8nrdJL7qp4sXx0nVeQgrtZTX3Ib
+uADX92rL/Kx7kZjl3lDwNOlfvOy3IfYMh3eR85/lPz7b6vV+PtRt9U9P4fH
V/saDj48f7MxOEf1yxbyuULJw+o3R+dY029YTdoZ43k+qxl9P6knDuP3paO0
hJzVCn7/YO3X1h/JbeiDD+7TmjFD+Fg+x8Y1oebpkLRRm6FmUY24m++Pp7mZ
XFo16Tet5Xao5WSC399y4pjPfhs/U/BFjYqxyG3oa1/jSc3TuR511Vwme0Yy
GXZsprr5M0g9/gF+X15Z/DTnqH3yMX6/eNjd5XE4eBv3KriuLJpL6skjSD1u
KNXOm06G7W/xeHSp/g0lj2ihYEv+pkPOxbm6smQ+r+tQN6ANmyCwo/bpSULA
I1pfm4/u57WzILqVi8hR9iNpZ03i9QHaupWL//dnd5L5aPxN42H1tbvHD8f3
ze4RxB+eCVDTIA8j7vh9yhRxBhvOP3zw3Ip9C4THaDQK734UTIfcII/o8wKv
Y1gOrp07ja8VNTXOCJ7ZoGjDZpN9y3143dauLroeHohCofD69qiC/R18Azze
nj4bYjryCTnKf+5gQwwid/HajLXbi+P8T3xMoDyQqqoqIe5+T0pKGhQoD+od
VpOK4XQr3tZW0kwdzRXtQESMB1JRUSEwnWd/BwbCw56hqvrCA2kqyucaqHTH
42B5nz3b2QsLCxuhrF+IPXmAPIq+8vRVxPIbU3v79wF4RxAID3tu/7u38xNs
USqVAs+BzjxBeF7Iw95evHiRtFqt5KrRaIjFUxNbt8dkMsVLwPMwU0Oof1/I
ysrCQ6wq2Dw+psEymWwF0zWCpqam7pHL5adLS0sPBlPLy8vjVSrVBwi79jEY
TJ4eGMuzs7NF66BgSpgnMGHz5iNP6HQ6yX/jslqtdOHCBeF3u+VS8ODdsu99
ZchyBLs7UIveKQWPj2kim39vKH4nZro5MTFxgFQsYQlLWMJyK8t/v0X8aw==

                   "], {{0, 26.}, {26., 0}}, {0, 255}, ColorFunction -> 
                   RGBColor, ImageResolution -> {144, 144}], 
                  BoxForm`ImageTag[
                  "Byte", ColorSpace -> "RGB", Interleaving -> True, 
                   MetaInformation -> <|
                    "Exif" -> <|
                    "ImageWidth" -> 52, "ImageLength" -> 52, "XResolution" -> 
                    144, "YResolution" -> 144, "ResolutionUnit" -> "Inch", 
                    "Software" -> 
                    "Created with the Wolfram Language : www.wolfram.com", 
                    "DateTime" -> 
                    DateObject[{2023, 4, 12, 9, 33, 53.}, "Instant", 
                    "Gregorian", -5.], "TimeZoneOffset" -> -5|>, 
                    "Comments" -> {
                    "Software" -> 
                    "Created with the Wolfram Language : www.wolfram.com", 
                    "Creation Time" -> 
                    DateObject[{2023, 4, 12, 9, 33, 53.}, "Instant", 
                    "Gregorian", None]}|>], Selectable -> False], 
                 DefaultBaseStyle -> "ImageGraphics", 
                 ImageSizeRaw -> {26., 26.}, 
                 PlotRange -> {{0, 26.}, {0, 26.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/LLMFunctions\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.2.6\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
Wolfram__LLMFunctions-1.2.6\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"Language model and other API based machine learning \
functions for the WL\"", Short], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "Wolfram/LLMFunctions", "Description" -> 
        "Language model and other API based machine learning functions for \
the WL", "Creator" -> {
         "Giulio Alessandrini", "Timothee Verdier", "Christopher Wolfram", 
          "Bob Sandheinrich"}, "Version" -> "1.2.6", "WolframVersion" -> 
        "13.3+", "PublisherID" -> "Wolfram", "License" -> "MIT", 
        "PrimaryContext" -> "Wolfram`LLMFunctions`", "Icon" -> 
        "Assets/Images/PacletIcon.png", "Loading" -> Automatic, "Updating" -> 
        Automatic, 
        "Extensions" -> {{
          "Kernel", "HiddenImport" -> True, "Root" -> "Kernel", "Context" -> 
           "Wolfram`LLMFunctions`", 
           "Symbols" -> {
            "System`ImageSynthesize", "System`LLMSynthesize", 
             "System`TextSummarize", "System`ChatObject", 
             "System`ChatEvaluate", "System`LLMFunction", 
             "System`LLMExampleFunction", "System`LLMResourceFunction", 
             "System`LLMPrompt", "System`LLMResourceTool", "System`LLMTool", 
             "System`LLMToolRequest", "System`LLMToolResponse", 
             "System`LLMConfiguration", "System`$LLMEvaluator", 
             "System`GenerateLLMToolResponse"}}, {
          "Kernel", "HiddenImport" -> None, "Root" -> "Kernel/LLMServices", 
           "Context" -> "LLMServices`", 
           "Symbols" -> {
            "LLMServices`Chat", "LLMServices`ChatSubmit", 
             "LLMServices`RegisterService", "LLMServices`UnregisterService", 
             "LLMServices`ResetServices", "LLMServices`RegisteredServiceQ", 
             "LLMServices`LLMServiceInformation", 
             "LLMServices`ResolveChatModel"}}, {
          "Asset", "Root" -> "Assets", 
           "Assets" -> {{"APIFunctions", "APIFunctions"}}}, {
          "Resource", "Root" -> "Resources", 
           "Resources" -> {{"Tokens", "Tokens"}}}, {
          "Documentation", "Root" -> "Documentation", "Language" -> "English",
            "LinkBase" -> "WolframMathematica"}}, "Location" -> 
        "/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
LLMFunctions-1.2.6"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
LLMFunctions-1.2.6/Assets\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/QuantumFramework\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.2.13\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Wolfram/QuantumFramework\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.2.13\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/\
Wolfram__QuantumFramework-1.2.13\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"Perform analytic and numeric quantum computations\"", 
                    Short], "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "Wolfram/QuantumFramework", "Description" -> 
        "Perform analytic and numeric quantum computations", "Creator" -> 
        "Wolfram Research, Quantum Computation Framework team", "License" -> 
        "MIT", "PublisherID" -> "Wolfram", "Version" -> "1.2.13", 
        "WolframVersion" -> "13.1+", "PrimaryContext" -> 
        "Wolfram`QuantumFramework`", 
        "Extensions" -> {{
          "Kernel", "Root" -> "Kernel", 
           "Context" -> {
            "Wolfram`QuantumFrameworkLoader`", {
             "Wolfram`QuantumFramework`", "QuantumFrameworkMain.m"}}, 
           "Symbols" -> {
            "Wolfram`QuantumFramework`QuditName", 
             "Wolfram`QuantumFramework`QuditBasis", 
             "Wolfram`QuantumFramework`QuantumBasis", 
             "Wolfram`QuantumFramework`QuantumState", 
             "Wolfram`QuantumFramework`QuantumOperator", 
             "Wolfram`QuantumFramework`QuantumMeasurementOperator", 
             "Wolfram`QuantumFramework`QuantumCircuitOperator", 
             "Wolfram`QuantumFramework`QuantumMeasurement", 
             "Wolfram`QuantumFramework`QuantumTensorProduct", 
             "Wolfram`QuantumFramework`QuantumPartialTrace", 
             "Wolfram`QuantumFramework`QuantumDistance", 
             "Wolfram`QuantumFramework`QuantumEntanglementMonotone", 
             "Wolfram`QuantumFramework`QuantumEntangledQ", 
             "Wolfram`QuantumFramework`QuantumWignerTransform", 
             "Wolfram`QuantumFramework`QuantumChannel", 
             "Wolfram`QuantumFramework`QuantumStateEstimate", 
             "Wolfram`QuantumFramework`QuantumMeasurementSimulation", 
             "Wolfram`QuantumFramework`QuantumEvolve"}}, {
          "Documentation", "Language" -> "English"}, {
          "AutoCompletionData", "Root" -> "AutoCompletionData"}, {
          "FrontEnd"}, {
          "Asset", "Root" -> "Assets", 
           "Assets" -> {{
             "IBMQ.paclet", "ServiceConnection_IBMQ-0.0.1.paclet"}, {
             "Cotengra.paclet", "Cotengra-0.1.paclet"}}}}, "Location" -> 
        "/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
QuantumFramework-1.2.13"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Users/arnoudb/Library/Mathematica/Paclets/Repository/Wolfram__\
QuantumFramework-1.2.13/Assets\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"BatchComputationProvider_AzureBatch\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.0.1\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"BatchComputationProvider_AzureBatch\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"1.0.1\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/BatchComputationProvider_AzureBatch\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"Missing", "[", "\"NotAvailable\"", "]"}], Short],
                     "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "BatchComputationProvider_AzureBatch", "Creator" -> 
        "Jesse Friedman <jessef@wolfram.com>", "Version" -> "1.0.1", 
        "WolframVersion" -> "12.3+", "AutoUpdating" -> False, 
        "Extensions" -> {{
          "BatchComputationProvider", "ProviderName" -> "AzureBatch", "Root" -> 
           "Provider/AzureBatch.wl"}, {
          "Kernel", "Root" -> "Provider", 
           "Context" -> {{
             "RemoteBatchSubmit`Providers`AzureBatch`BatchAPI`Jobs`", 
              "BatchAPI/Jobs.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`BatchAPI`Tasks`", 
              "BatchAPI/Tasks.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`BlobStorageAPI`Blobs`", 
              "BlobStorageAPI/Blobs.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`BlobStorageAPI`\
Containers`", "BlobStorageAPI/Containers.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`Actions`", 
              "Actions.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`Licensing`", 
              "Licensing.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`Properties`", 
              "Properties.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`Utility`", 
              "Utility.wl"}, {
             "RemoteBatchSubmit`Providers`AzureBatch`Validation`", 
              "Validation.wl"}}}, {
          "Asset", "Root" -> ".", 
           "Assets" -> {{
             "APISpecification_Batch", 
              "Assets/AzureAPIs/BatchService.json"}, {
             "APISpecification_BlobStorage", 
              "Assets/AzureAPIs/BlobStorage.json"}, {
             "Icon", "Assets/AzureBatch-Icon.wxf"}, {
             "ServiceConnectionRoot", "ServiceConnection/"}}}}, "Location" -> 
        "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/BatchComputationProvider_AzureBatch"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/BatchComputationProvider_AzureBatch\"\>", "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Chemistry\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14.0.4\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Chemistry\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14.0.4\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/Chemistry\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    "\"Chemistry tools for the Wolfram Language\"", Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "Chemistry", "Description" -> 
        "Chemistry tools for the Wolfram Language", "Version" -> "14.0.4", 
        "WolframVersion" -> "14.0+", "Loading" -> Automatic, "AutoUpdating" -> 
        True, "Creator" -> "Jason Biggs <jasonb@wolfram.com>", 
        "Extensions" -> {{"FrontEnd", "Prepend" -> True}, {"LibraryLink"}, {
          "JLink"}, {"Documentation", "Language" -> "English"}, {
          "Asset", "Root" -> "Resources", 
           "Assets" -> {{"fpscores", "fpscores.wxf.gz"}, {
             "OpenBabelLink", "OpenBabelLink"}, {"RDKitData", "RDKitData"}, {
             "AtomicData", "AtomicData"}, {
             "SmilesEntityAssociation", "SmilesEntityAssociation"}, {
             "templates", "templates.mae"}}}, {
          "Kernel", "HiddenImport" -> None, "Root" -> "Kernel", 
           "Context" -> {
            "Chemistry`", {
             "WolframChemistryLibrary`", 
              "WolframChemistryLibrary/WolframChemistryLibrary.wl"}}, 
           "Symbols" -> {
            "Chemistry`MoleculeRelationQ", "Chemistry`NameToSMILES", 
             "System`Atom", "System`AtomCoordinates", "System`AtomCount", 
             "System`AtomDiagramCoordinates", "System`AtomLabels", 
             "System`AtomLabelStyle", "System`AtomList", "System`Bond", 
             "System`BondCount", "System`BondLabels", "System`BondLabelStyle",
              "System`BondList", "System`BondQ", "System`ChemicalConvert", 
             "System`ChemicalFormula", "System`ChemicalInstance", 
             "System`ChemicalReaction", "System`ConnectedMoleculeComponents", 
             "System`ConnectedMoleculeQ", "System`FindMoleculeSubstructure", 
             "System`IncludeAromaticBonds", "System`IncludeHydrogens", 
             "System`Molecule", "System`MoleculeAlign", 
             "System`MoleculeContainsQ", "System`MoleculeDraw", 
             "System`MoleculeEquivalentQ", "System`MoleculeGraph", 
             "System`MoleculeMaximumCommonSubstructure", 
             "System`MoleculeModify", "System`MoleculeName", 
             "System`MoleculePattern", "System`MoleculePlot", 
             "System`MoleculePlot3D", "System`MoleculeProperty", 
             "System`MoleculeQ", "System`MoleculeRecognize", 
             "System`MoleculeSubstructureCount", "System`MoleculeValue", 
             "System`StereochemistryElements", "System`ValenceErrorHandling", 
             "System`ValenceFilling", "System`ReactionBalance", 
             "System`MoleculeMatchQ", "System`IgnoreIsotopes", 
             "System`IgnoreStereochemistry", "System`ReactionBalancedQ", 
             "System`FindIsomers", "System`MoleculeFreeQ", 
             "System`ReactionBalancedQ", "System`PatternReaction", 
             "System`ApplyReaction", "Chemistry`FromChemistryBox"}}}, 
        "Location" -> 
        "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/Chemistry"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/Chemistry/Resources\"\>", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     InterpretationBox[
      RowBox[{
       TagBox["PacletObject",
        "SummaryHead"], "[", 
       DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
        "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PacletTools\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14.0.0.0\"", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.0416667], {
                   FaceForm[{
                    RGBColor[0.961, 0.961, 0.961], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5454, 22.5972}, {7.5464, 20.5002}, {2.5454, 
                    18.4022}, {2.5454, 12.5982}, {2.5454, 12.5972}, {2.5454, 
                    6.7952}, {7.5454, 4.6962}, {7.546, 4.6972}, {12.5454, 
                    2.5992}, {17.5454, 4.6972}, {17.5454, 4.6962}, {22.5454, 
                    6.7952}, {22.5454, 12.5972}, {22.5454, 12.5982}, {22.5454,
                     18.4022}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                    14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                    8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 
                    14.0569}, {6.875, 14.0569}, {6.875, 8.3359}, {1.952, 
                    6.2709}, {2.048, 6.0399}, {7., 8.1169}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {
                    7.0475, 3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {
                    17.0475, 4.1733}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                    19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                    13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 
                    19.8602}, {6.875, 19.8602}, {6.875, 14.1392}, {1.952, 
                    12.0742}, {2.048, 11.8432}, {7., 13.9202}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 
                    18.3563}, {11.9996, 18.3033}, {12.1246, 18.3563}, {
                    12.1246, 21.3633}, {11.9996, 21.4153}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                    19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                    20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 
                    19.5284}, {12., 17.2194}, {12., 17.2194}, {15.7, 
                    18.7724}, {17.5, 19.5274}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                    5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 
                    4.8083}, {17.5, 9.5283}, {21.5, 11.2073}}, {{21.5, 
                    12.7113}, {21.5, 12.2913}, {17., 10.4033}, {16.5, 
                    10.6133}, {16.5, 10.1943}, {15.707, 9.8613}, {16.5, 
                    9.5283}, {16.5, 4.8083}, {16.5, 4.8093}, {16.5, 4.3903}, {
                    15.707, 4.0573}, {17., 3.5143}, {22.5, 5.8223}, {22.5, 
                    12.2913}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 
                    6.4876}, {2.5, 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {
                    7.5, 9.1096}, {7.5, 9.5286}, {8.292, 9.8616}, {7.5, 
                    10.1936}, {7.5, 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {
                    2.5, 12.7106}, {1.5, 12.2916}, {1.5, 5.8226}, {7., 
                    3.5146}, {8.293, 4.0576}, {7.5, 4.3906}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                    19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{
                    6.5005, 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {
                    6.5005, 15.3322}}, {{7.5005, 10.1932}, {7.5005, 
                    10.6122}, {7.5005, 15.3322}, {12.0005, 17.2202}, {12.5005,
                     17.0102}, {12.5005, 18.0952}, {7.0005, 20.4032}, {1.5005,
                     18.0952}, {1.5005, 11.6262}, {7.0005, 9.3182}, {8.2935, 
                    9.8612}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 
                    10.612}, {17.5, 15.332}, {21.5, 17.01}}, {{13.293, 
                    17.762}, {17., 19.318}, {20.708, 17.762}, {17., 
                    16.207}}, {{17., 20.403}, {11.5, 18.095}, {11.5, 17.01}, {
                    12., 17.22}, {16.5, 15.332}, {16.5, 10.612}, {16.5, 
                    10.194}, {15.706, 9.861}, {17., 9.318}, {22.5, 11.626}, {
                    22.5, 18.095}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995,
                     2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{
                    11.4995, 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {
                    11.4995, 7.4316}}, {{16.4995, 10.6136}, {16.4995, 
                    10.1946}, {11.9995, 8.3056}, {8.2915, 9.8616}, {7.4995, 
                    10.1936}, {7.4995, 10.6146}, {6.4995, 10.1946}, {6.4995, 
                    3.7256}, {11.9995, 1.4176}, {17.4995, 3.7256}, {17.4995, 
                    10.1946}}}]}, {
                   FaceForm[{
                    RGBColor[0.965, 0.765, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {
                    16.945, 9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                    15.5856}}}]}, {
                   FaceForm[{
                    RGBColor[0.91, 0.655, 0.635], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    12.125, 17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {
                    6.952, 9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 
                    9.7447}, {17.048, 9.9757}, {12.125, 12.0407}}}]}, {
                   FaceForm[{
                    RGBColor[0.867, 0.067, 0.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 
                    14.9116}, {16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 
                    13.2336}, {11.5, 8.5146}, {7.5, 10.1926}}, {{15.708, 
                    15.6636}, {12., 14.1086}, {8.292, 15.6636}, {12., 
                    17.2206}}, {{12., 18.3046}, {6.5, 15.9956}, {6.5, 
                    9.5286}, {12., 7.2206}, {17.5, 9.5286}, {17.5, 
                    15.9956}}}]}}, AspectRatio -> Automatic, 
                 ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"PacletTools\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"14.0.0.0\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/PacletTools\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"Missing", "[", "\"NotAvailable\"", "]"}], Short],
                     "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]},
         "SummaryPanel"],
        DynamicModuleValues:>{}], "]"}],
      PacletObject[<|
       "Name" -> "PacletTools", "Version" -> "14.0.0.0", "WolframVersion" -> 
        "14.0+", "AutoUpdating" -> True, 
        "Extensions" -> {{
          "Kernel", "Root" -> "Kernel", "Context" -> "PacletTools`"}, {
          "Kernel", "Root" -> "DocumentationBuild/Kernel", "Context" -> 
           "DocumentationBuild`"}, {
          "Kernel", "Root" -> "Transmogrify/Kernel", "Context" -> 
           "Transmogrify`"}, {"Documentation", "Language" -> All}, {
          "Asset", "Assets" -> {{"Examples", "./Examples"}}}, {
          "Asset", "Assets" -> {{"TestData", "./Tests/Data"}}}, {
          "Asset", 
           "Assets" -> {{"DB-Assets", "./DocumentationBuild/Assets"}, {
             "DB-XMLTransforms", "./DocumentationBuild/XMLTransforms"}, {
             "T-XMLTransforms", "./Transmogrify/XMLTransforms"}, {
             "T-Tests", "./Transmogrify/Tests"}}}, {
          "Test", "Method" -> "Experimental-v1"}}, 
        "Dependencies" -> {"Wolfram/ErrorTools"}, "Location" -> 
        "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/PacletTools"|>],
      Editable->False,
      SelectWithContents->True,
      Selectable->False], ",", 
     RowBox[{
     "{", "\<\"/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/PacletTools\"\>", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.9182330837100277`*^9, 3.918233101914089*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"ef284cad-75fb-4e69-888e-801ba3aa0e2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{
  "ImportYAML", "[", "\"\</Users/arnoudb/yaml/example.yaml\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.9182150436667957`*^9, 3.918215048617313*^9}, {
  3.918215448516745*^9, 3.91821545556767*^9}, {3.9182155483794813`*^9, 
  3.918215553187935*^9}, {3.918216952605322*^9, 3.9182169543996983`*^9}, {
  3.9182171261312428`*^9, 3.918217126506029*^9}, {3.918217586447377*^9, 
  3.918217589363581*^9}, {3.9182192748421993`*^9, 3.9182192753126783`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"30a0947b-f19f-46bc-9420-21fde3fdb599"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "person" -> <|
        "name" -> "Alice Johnson", "age" -> 30, 
         "interests" -> {"reading", "hiking", "technology"}|>, 
       "servers" -> <|
        "production" -> <|"host" -> "example.com", "port" -> 8080|>, 
         "development" -> <|"host" -> "localhost", "port" -> 3000|>|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[78.4], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            TypeSystem`PackageScope`UnknownShape[False]]], 5, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], TypeSystem`AnyType, 5], 2], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[78.4], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            TypeSystem`PackageScope`UnknownShape[False]]], 5, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], TypeSystem`AnyType, 5], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["person", 
                  Style[
                  "person", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Alice Johnson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["age", 
                  Style[
                  "age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["interests", 
                  Style[
                  "interests", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["interests"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["interests"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"reading", "hiking", "technology"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"reading", "hiking", "technology"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["interests"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["interests"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["servers", 
                  Style[
                  "servers", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["production", 
                  Style[
                  "production", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["production"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["production"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"host" -> "example.com", "port" -> 8080|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"host" -> "example.com", "port" -> 8080|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["production"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["production"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["development", 
                  Style[
                  "development", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["development"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["development"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"host" -> "localhost", "port" -> 3000|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"host" -> "localhost", "port" -> 3000|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["development"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["development"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{459., {74.134033203125, 79.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{459., {74.134033203125, 79.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.918215438803874*^9, 3.918215456019469*^9}, 
   3.918215553798386*^9, 3.918215640955474*^9, 3.91821568697046*^9, 
   3.918215871144651*^9, 3.9182159072619257`*^9, 3.918216146472684*^9, {
   3.918216310531679*^9, 3.918216338066799*^9}, 3.918216446928141*^9, 
   3.918216855658268*^9, {3.918216942285781*^9, 3.918216954869927*^9}, {
   3.9182171214122677`*^9, 3.918217139728442*^9}, 3.91821758992097*^9, 
   3.918217717723105*^9, 3.918217786160345*^9, 3.918219091938133*^9, {
   3.918219198676632*^9, 3.9182192345201178`*^9}, 3.9182192757982593`*^9, 
   3.918219357616207*^9, 3.918226659548244*^9, 3.918226715940214*^9, 
   3.9182269554462547`*^9, 3.9182316349773283`*^9, 3.918232119823263*^9, 
   3.918232211728179*^9, 3.918232373962425*^9, 3.91823242369837*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"8a6b6466-787e-4ff1-903e-8d7c97ee78c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "data", "]"}]], "Input",
 CellChangeTimes->{{3.918219276313127*^9, 3.9182192788942833`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"aa9841b6-e0d9-4704-aaaa-8e24697c8e7b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"person\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"Alice Johnson\"\>"}], ",", 
      RowBox[{"\<\"age\"\>", "\[Rule]", "30"}], ",", 
      RowBox[{"\<\"interests\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\<\"reading\"\>", ",", "\<\"hiking\"\>", 
         ",", "\<\"technology\"\>"}], "}"}]}]}], "\[RightAssociation]"}]}], 
   ",", 
   RowBox[{"\<\"servers\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"production\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"host\"\>", "\[Rule]", "\<\"example.com\"\>"}], ",", 
         RowBox[{"\<\"port\"\>", "\[Rule]", "8080"}]}], 
        "\[RightAssociation]"}]}], ",", 
      RowBox[{"\<\"development\"\>", "\[Rule]", 
       RowBox[{"\[LeftAssociation]", 
        RowBox[{
         RowBox[{"\<\"host\"\>", "\[Rule]", "\<\"localhost\"\>"}], ",", 
         RowBox[{"\<\"port\"\>", "\[Rule]", "3000"}]}], 
        "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.918219279188101*^9, 3.918219358856682*^9, 
  3.918226720793934*^9, 3.918231636432249*^9, 3.9182323752460814`*^9, 
  3.918232426257271*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"eca6aa9b-3e73-4d69-a69a-fad7bccc29ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["data"], "Input",
 CellChangeTimes->{{3.918232394215562*^9, 3.918232394580217*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a00b6371-3e59-4b77-9430-9f2b944c16cc"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "person" -> <|
        "name" -> "Alice Johnson", "age" -> 30, 
         "interests" -> {"reading", "hiking", "technology"}|>, 
       "servers" -> <|
        "production" -> <|"host" -> "example.com", "port" -> 8080|>, 
         "development" -> <|"host" -> "localhost", "port" -> 3000|>|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[78.4], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            TypeSystem`PackageScope`UnknownShape[False]]], 5, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], TypeSystem`AnyType, 5], 2], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[78.4], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[123.20000000000002`], 
            TypeSystem`PackageScope`UnknownShape[False]]], 5, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Assoc[
        TypeSystem`Atom[String], TypeSystem`AnyType, 5], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["person", 
                  Style[
                  "person", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["Alice Johnson", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{145.60000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["age", 
                  Style[
                  "age", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["age"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["age"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["30"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["age"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["interests", 
                  Style[
                  "interests", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["interests"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["interests"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"reading", "hiking", "technology"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"reading", "hiking", "technology"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["person"], 
                    Key["interests"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["person"], 
                 Key["interests"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["servers", 
                  Style[
                  "servers", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{78.4, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["production", 
                  Style[
                  "production", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["production"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["production"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"host" -> "example.com", "port" -> 8080|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"host" -> "example.com", "port" -> 8080|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["production"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["production"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["development", 
                  Style[
                  "development", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["development"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["development"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{123.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[<|"host" -> "localhost", "port" -> 3000|>, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[<|"host" -> "localhost", "port" -> 3000|>, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["servers"], 
                    Key["development"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["servers"], 
                 Key["development"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{459., {74.134033203125, 79.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{459., {74.134033203125, 79.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.918232394877385*^9, 3.918232427779255*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"031bdab8-01bf-48e6-9a60-719f372f1e77"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ExportYAML", "[", 
  RowBox[{"\"\</Users/arnoudb/out.yaml\>\"", ",", "data"}], "]"}]], "Input",
 CellChangeTimes->{{3.918219266933928*^9, 3.918219287667369*^9}, {
  3.91821936501159*^9, 3.918219367909959*^9}, {3.918227042165707*^9, 
  3.918227043350287*^9}, {3.91823147770389*^9, 3.918231479857851*^9}, {
  3.918231515293294*^9, 3.918231520448991*^9}, {3.918231641224732*^9, 
  3.918231641585561*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"bcd79d83-eccc-4ef0-a765-5d5a3ba5943a"],

Cell[BoxData[
 RowBox[{"ExportYAML", "[", 
  RowBox[{"\"\</Users/arnoudb/out.yaml\>\"", ",", 
   RowBox[{"Dataset", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "->", "1"}], ",", 
      RowBox[{"\"\<b\>\"", "->", "2"}], ",", 
      RowBox[{"\"\<c\>\"", "->", "3"}]}], "|>"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.918219266933928*^9, 3.918219287667369*^9}, {
  3.91821936501159*^9, 3.918219367909959*^9}, {3.918227042165707*^9, 
  3.918227043350287*^9}, {3.91823147770389*^9, 3.918231479857851*^9}, {
  3.918231515293294*^9, 3.918231520448991*^9}, {3.918231641224732*^9, 
  3.918231641585561*^9}, {3.918232316803412*^9, 3.9182323247908297`*^9}, {
  3.918232472138986*^9, 3.9182324747329187`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"5b02526d-62da-487f-a3c5-17d2cda74b2a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<a\>\"", "->", "1"}], ",", 
    RowBox[{"\"\<b\>\"", "->", "2"}], ",", 
    RowBox[{"\"\<c\>\"", "->", "3"}]}], "|>"}], "]"}]], "Input",
 CellChangeTimes->{{3.918232452630312*^9, 3.918232455130767*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"f11ddab1-f60d-43b4-a948-135f7127377a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "3"}]}], "}"}]], "Output",
 CellChangeTimes->{3.91823245546835*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"bfc90403-49ed-4c58-a014-65618987efea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FilePrint", "[", "\"\</Users/arnoudb/out.yaml\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.918219375104448*^9, 3.918219377217689*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"ff30cb37-4294-44f0-864b-2895fa14396c"],

Cell["\<\
a: 1
b: 2
c: 3\
\>", "Print",
 CellChangeTimes->{3.918232477117464*^9},
 CellLabel->
  "During evaluation of \
In[12]:=",ExpressionUUID->"c0319453-adac-41b8-90f3-26b145765538"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImportYAML", "[", "\"\</Users/arnoudb/out.yaml\>\"", "]"}]], "Input",\

 CellChangeTimes->{{3.918226939833537*^9, 3.918226948665086*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"da0fc769-c345-42c9-a05c-31c7130ae94f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> 
     Failure["PythonError", <|
       "MessageTemplate" :> "'NoneType' object is not iterable", 
        "MessageParameters" :> <||>, "FailureCode" :> "TypeError", 
        "Traceback" :> OpenerView[{
           Row[{"TypeError", " ", "'NoneType' object is not iterable"}], 
           Style[
            Column[{
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                Column[{
                  
                  Column[{
                   "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                  "handle_message"}], 
                Column[{
                  
                  Column[{
                   " 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                  "evaluate_message"}], 
                Column[{
                  
                  Column[{
                   " 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    " 118.          result = execute_from_string(input, \
**opts)", " 119.  ", " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", 
                    Item[
                    " 123.          result = result(*args)", Background -> 
                    LightYellow], " 124.  ", 
                    " 125.      if return_type == \"string\":", 
                    " 126.          # bug 354267 repr returns a 'str' even on \
py2 (i.e. bytes).", " 127.          result = force_text(repr(result))", 
                    " 128.  ", " 129.      return result"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
              OpenerView[{"importyaml", 
                Column[{
                  Column[{
                    Item["   5.  importyaml", Background -> LightYellow]}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "file", "/Users/arnoudb/out.yaml"}, {
                    "stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless"], " in ", "load"}], 
                Column[{
                  
                  Column[{
                   "  74.  def load(stream, Loader):", "  75.      \"\"\"", 
                    "  76.      Parse the first YAML document in a stream", 
                    "  77.      and produce the corresponding Python object.",
                     "  78.      \"\"\"", 
                    "  79.      loader = Loader(stream)", "  80.      try:", 
                    Item[
                    "  81.          return loader.get_single_data()", 
                    Background -> LightYellow], "  82.      finally:", 
                    "  83.          loader.dispose()", "  84.  ", 
                    "  85.  def load_all(stream, Loader):", 
                    "  86.      \"\"\"", 
                    "  87.      Parse all YAML documents in a stream"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}, {"Loader", "<class 'yaml.loader.Loader'>"}, {
                    "loader", "<yaml.loader.Loader object at 0x10492f810>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "get_single_data"}], 
                Column[{
                  
                  Column[{
                   "  44.          if self.check_node():", 
                    "  45.              return \
self.construct_document(self.get_node())", "  46.  ", 
                    "  47.      def get_single_data(self):", 
                    "  48.          # Ensure that the stream contains a \
single document and construct it.", 
                    "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    Item[
                    "  51.              return self.construct_document(node)",
                     Background -> LightYellow], "  52.          return None",
                     "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    "  55.          data = self.construct_object(node)", 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_document"}], 
                Column[{
                  
                  Column[{
                   "  48.          # Ensure that the stream contains a single \
document and construct it.", "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    "  51.              return self.construct_document(node)",
                     "  52.          return None", "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    Item[
                    "  55.          data = self.construct_object(node)", 
                    Background -> LightYellow], 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators", "  58.              self.state_generators = []", 
                    "  59.              for generator in state_generators:", 
                    "  60.                  for dummy in generator:", 
                    "  61.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                Column[{
                  
                  Column[{
                   "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_tuple"}], 
                Column[{
                  
                  Column[{
                   " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                Column[{
                  
                  Column[{
                   " 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                Column[{
                  
                  Column[{
                   " 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<list_iterator object at 0x1047cae30>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                Column[{
                  
                  Column[{
                   "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_object_new"}], 
                Column[{
                  
                  Column[{
                   " 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_object_apply"}], 
                Column[{
                  
                  Column[{
                   " 635.          if isinstance(node, SequenceNode):", 
                    " 636.              args = self.construct_sequence(node, \
deep=True)", " 637.              kwds = {}", " 638.              state = {}", 
                    " 639.              listitems = []", 
                    " 640.              dictitems = {}", 
                    " 641.          else:", 
                    Item[
                    " 642.              value = self.construct_mapping(node, \
deep=True)", Background -> LightYellow], 
                    " 643.              args = value.get('args', [])", 
                    " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "newobj", "True"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                
                Column[{
                  
                  Column[{
                   " 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {
                    "__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                
                Column[{
                  
                  Column[{
                   " 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"mapping", "{}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', \
value='state')"}, {"value_node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "key", "state"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                Column[{
                  
                  Column[{
                   "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "True"}, {"old_deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_tuple"}], 
                Column[{
                  
                  Column[{
                   " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                Column[{
                  
                  Column[{
                   " 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                Column[{
                  
                  Column[{
                   " 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<list_iterator object at 0x1047cbf70>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                Column[{
                  
                  Column[{
                   " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    Item[
                    " 107.                  for dummy in generator:", 
                    Background -> LightYellow], 
                    " 108.                      pass", 
                    " 109.              else:", 
                    " 110.                  \
self.state_generators.append(generator)", 
                    " 111.          self.constructed_objects[node] = data", 
                    " 112.          del self.recursive_objects[node]", 
                    " 113.          if deep:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function SafeConstructor.construct_yaml_map at \
0x10479ec00>"}, {"tag_suffix", "None"}, {"data", "{}"}, {
                    "generator", 
                    "<generator object SafeConstructor.construct_yaml_map at \
0x10473a5e0>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_yaml_map"}], 
                Column[{
                  
                  Column[{
                   " 406.          data = []", " 407.          yield data", 
                    " 408.          \
data.extend(self.construct_sequence(node))", " 409.  ", 
                    " 410.      def construct_yaml_map(self, node):", 
                    " 411.          data = {}", " 412.          yield data", 
                    Item[
                    " 413.          value = self.construct_mapping(node)", 
                    Background -> LightYellow], 
                    " 414.          data.update(value)", " 415.  ", 
                    " 416.      def construct_yaml_object(self, node, cls):", 
                    " 417.          data = cls.__new__(cls)", 
                    " 418.          yield data", 
                    " 419.          if hasattr(data, '__setstate__'):"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "data", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                
                Column[{
                  
                  Column[{
                   " 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                
                Column[{
                  
                  Column[{
                   " 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"mapping", "{'args': ('a', 1)}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', value='head')"}, \
{"value_node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "key", "head"}, {"value", "('a', 1)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                Column[{
                  
                  Column[{
                   "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLSymbol"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_object_new"}], 
                Column[{
                  
                  Column[{
                   " 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "construct_python_object_apply"}], 
                Column[{
                  
                  Column[{
                   " 643.              args = value.get('args', [])", 
                    " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)", 
                    " 649.          if state:", 
                    Item[
                    " 650.              \
self.set_python_instance_state(instance, state)", Background -> LightYellow], 
                    " 651.          if listitems:", 
                    " 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "newobj", "True"}, {"args", "[]"}, {"kwds", "{}"}, {
                    "state", "(None, {'name': 'Rule'})"}, {
                    "listitems", "[]"}, {"dictitems", "{}"}, {
                    "value", "{'state': (None, {'name': 'Rule'})}"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "set_python_instance_state"}], 
                Column[{
                  
                  Column[{
                   " 719.          return super(UnsafeConstructor, \
self).find_python_name(name, mark, unsafe=True)", " 720.  ", 
                    " 721.      def make_python_instance(self, suffix, node, \
args=None, kwds=None, newobj=False):", 
                    " 722.          return super(UnsafeConstructor, \
self).make_python_instance(", 
                    " 723.              suffix, node, args, kwds, newobj, \
unsafe=True)", " 724.  ", 
                    " 725.      def set_python_instance_state(self, instance, \
state):", 
                    Item[
                    " 726.          return super(UnsafeConstructor, \
self).set_python_instance_state(", Background -> LightYellow], 
                    " 727.              instance, state, unsafe=True)", 
                    " 728.  ", 
                    " 729.  UnsafeConstructor.add_multi_constructor(", 
                    " 730.      'tag:yaml.org,2002:python/module:',", 
                    " 731.      UnsafeConstructor.construct_python_module)", 
                    " 732.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "(None, {'name': 'Rule'})"}, {
                    "__class__", 
                    "<class 'yaml.constructor.UnsafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
              OpenerView[{
                Row[{
                  Button[
                   Style[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                   
                   If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                  "set_python_instance_state"}], 
                Column[{
                  
                  Column[{
                   " 599.              slotstate = {}", 
                    " 600.              if isinstance(state, tuple) and \
len(state) == 2:", " 601.                  state, slotstate = state", 
                    " 602.              if hasattr(instance, '__dict__'):", 
                    " 603.                  if not unsafe and state:", 
                    " 604.                      for key in state.keys():", 
                    " 605.                          \
self.check_state_key(key)", 
                    Item[
                    " 606.                  instance.__dict__.update(state)", 
                    Background -> LightYellow], 
                    " 607.              elif state:", 
                    " 608.                  slotstate.update(state)", 
                    " 609.              for key, value in slotstate.items():",
                     " 610.                  if not unsafe:", 
                    " 611.                      self.check_state_key(key)", 
                    " 612.                  setattr(instance, key, value)"}, 
                   Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                  OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x10492f810>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "None"}, {"unsafe", "True"}, {
                    "slotstate", "{'name': 'Rule'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
            "Courier"]}, True]|>], "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`AtomShape[10], "InitialType" -> 
     TypeSystem`AnyType, "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`AtomShape[10], "Type" -> 
     TypeSystem`AnyType, "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 2, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"GeneralUtilities`ReturnFailed", "[", "]"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{}, "Item",
                 False], "Mouse"], ImageSize -> {{10, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{270., {20.134033203125, 25.865966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{270., {20.134033203125, 25.865966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.918226949184083*^9, 3.918231484482806*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"77fb7191-a3b7-4c11-8bef-839cb82609c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"session", "=", 
  RowBox[{"First", "@", 
   RowBox[{"ExternalSessions", "[", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.91822697878841*^9, 3.9182269920503807`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"683b20bb-f777-4a8b-8af0-06695596c3e4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ExternalSessionObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PyYAML\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   PaneBox[
                   "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/bin/python\"", BaselinePosition -> 
                    Baseline], 
                   OutputForm[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/bin/python"], Editable -> False], 
                  "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.05], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 17.7334}, {7.0998, 
                 17.7334}, {6.7168, 17.342399999999998`}, {6.7168, 16.8624}, {
                 6.7168, 16.3854}, {7.0998, 15.997399999999999`}, {
                 7.5718000000000005`, 15.997399999999999`}, {
                 8.043800000000001, 15.997399999999999`}, {8.4268, 16.3854}, {
                 8.4268, 16.8624}, {8.4268, 17.342399999999998`}, {
                 8.043800000000001, 17.7334}, {7.5718000000000005`, 
                 17.7334}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQvXD12hvxZbwODSxH+w2/izl86QsuUZnOAuezVHCr
aNT9se+5ncGQzyjl8EZ2+QsPve/2X6bfndzeKu/Qst2h6dHxD/ZfvSLbLMSU
4fz1U1I7kmVV4erNVtuFRxdqOCRs3P9mns0fe98WXv/1ItoOR9qWh58yYnP4
+AVowA4dh6z8D60nQwTg/EsTY/45/1KG87O1v02/K6zi8O7kYae1L3UdBLi3
Lqs8Lubw+zRQhEnPwdnuxc01v8QcGtQOtS2fbgDng2w5ctHQgc1E0MzGVsLB
+wS77exSIwfP/bWyFunyDs2BnnMbjhk5+CzjclP9quCwVMdZ5vUjI4cJhuW6
ivFKDqbvLVzdPxk5JIYEqS84qezgLyeW5fvZyGHaJp7CNacRfAOQAamqcD63
m2op0y01h3aQA54YOZx6ar/kvp0G3D4rZa/q5vVaEPMnQe0v1XG4bgIUWG4I
58P8A+M/mCO4dC+jJpy/M5vz54Llag73gLESNVkLEm/7VBwOWgItcNaA86PE
t19kiJOH80OmKfaVFkrC+ZbpLpn5BSIOx3JNGrY7KMH5UZf3PBaZKwfnw9IH
AO506oE=
                 "], {{12.401800000000001`, 4.1044}, {11.9298, 4.1044}, {
                 11.5458, 3.7164}, {11.5458, 3.2394}, {11.5458, 
                 2.7593999999999994`}, {11.9298, 2.369399999999999}, {
                 12.401800000000001`, 2.369399999999999}, {
                 12.872800000000002`, 2.369399999999999}, {13.2568, 
                 2.7593999999999994`}, {13.2568, 3.2394}, {13.2568, 3.7164}, {
                 12.872800000000002`, 4.1044}, {12.401800000000001`, 
                 4.1044}}, CompressedData["
1:eJxTTMoPSmViYGBQAWIQ/Uei+LrQJ2UHhUNty8NPfbBfaXrW2m+iEpyvdVrg
+C4LRYcC3899wSWf7M+tOn81LEfe4cBGvbzFjN/sb635FZPrKuPgUPST/+X2
n/bOdi9urvkl5sARP8NHtIfRAcY/smKJn4MwD5y/aIv5j0MpcnB+rknDdocm
RQepRxHi2y9KOeyeNoG/qkzZIQrIY4iTh/MPWip7VTtrwPkuv96+PmCpDedf
mhjzz3mXroPFtaO5JgxqcP6DOYJL9zJqwvldfU8+yV/ScWBbPMmKMdfA4eMX
r8i2HToOE/mrzFbXGcL5GnU9O7M1jRympHYkx8ZoO9z8AJIwcjBbbRceXajh
0Pzo+Izd34wc3p087LT2pQqcL7R070HxNCWH+TY6V2YB1SeEBKkv6JR3kKlJ
NAoVAKo/APTIb0kHkDMbphs6NLAc7Tf8LgZ3D4wPdu8vZTgfSJbrPlR2WNC5
4eHLqSIOz+yX3N/Xp+OQF1a7bluSiIPPMi431VIdeHjD+CLAYLzHxOQwi0N6
XpymlsMFzgylnIpf9lURK4AxrgGPT3B47lRzWNAU6Dm34ZP94ZRVQKerwtMD
enoBAPI7A7I=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.20800000000000002`, 0.514, 0.6859999999999999], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {{{7.5718000000000005`, 
                 17.6836}, {8.014800000000001, 17.6836}, {8.3778, 17.3156}, {
                 8.3778, 16.862599999999997`}, {8.3778, 16.4116}, {
                 8.014800000000001, 16.046599999999998`}, {
                 7.5718000000000005`, 16.046599999999998`}, {7.1268, 
                 16.046599999999998`}, {6.7658000000000005`, 16.4116}, {
                 6.7658000000000005`, 16.862599999999997`}, {
                 6.7658000000000005`, 17.3156}, {7.1268, 17.6836}, {
                 7.5718000000000005`, 17.6836}}, CompressedData["
1:eJxTTMoPSmViYGBQBWIQnRgSpL7gpLLDYxHZk0//GzmYnbX2uxio5NBvWK6r
COQ7nU+7+vyVgsOa7tsZDO+NHKLEt19kiJN3EPMI+CNx2cgh6fBl7VRJCYd/
zr/evm4wchDg3rqs8riYQ2vU5T2PrxjC+XxzjBdtmW4A59fKWqS7vNR1uDQx
BqhVGYMPVKRpdUkHrh7Gb5l3dtX5UAE4v+gn/8vt69ng/DOHndZm3vttD+YH
aTt8OAkS+Gb/aUNA9qxyDQeec5KBt6Q/2N/XnbDgh6GqgwTQ2/ZL3tt77Ae6
QF0Zrv6Nhat7UaW8wxWXGx++eP223xet4PgxWcqBJ0Mpp6KK2aFlefgpoyNi
DgtXr70RX8YL5wcBbZmzSASDP2llU6DnXDk4/4fhs3WqKkoOb/V3q/N3Szq0
nQw5uGKJCjx8YfyDlspe1c4acL5XdbO+zzItOP+Z/ZL7+/p0HJR2/mn/MlsN
zgfybl9n1ITzYeEP4wNjvXPDQUOHa8+ztL9N13IARW/+QiO4fbD4haQPNYfO
DQ9fTv1k5NADUueoColvBmMH9PQDAFGHDrQ=
                 "]}]}, {
               FaceForm[{
                 RGBColor[0.976, 0.8430000000000001, 0.353], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{12.4014, 4.0552}, {12.846400000000001`, 4.0552}, {
                 13.2074, 3.6902}, {13.2074, 3.2392000000000003`}, {13.2074, 
                 2.7862}, {12.846400000000001`, 2.4182}, {12.4014, 2.4182}, {
                 11.958400000000001`, 2.4182}, {11.595400000000001`, 
                 2.7862}, {11.595400000000001`, 3.2392000000000003`}, {
                 11.595400000000001`, 3.6902}, {11.958400000000001`, 
                 4.0552}, {12.4014, 4.0552}}, CompressedData["
1:eJxTTMoPSmViYGBQBGIQ3bszm/PnAl2HgsWMe1gv6TjA+Ec26uUtZtSE819t
X8/8nEfNISJ64/43ctoOlq7uRT/7lR06k2PvuDlrwPkvs7S/TY+Vh/MvpF19
nrVaCs6fH6d5WuC4mMNLkHk9inB+1r3Crr4UOTi/LerynsciPAh5hvxGlqNM
Dr8OpaxKuCLlcO96Y7HblF/2MPtesZgImtl8tde5MuuZbLqSw52tLTUXNr+1
/3363cnDTKoOCo4fk8/EvraHuRem3j4c6KEcLQel5HdRTna/7Ndlghyi4zCL
Q3penCaTA4wPcw+Mn7H5VfHWqSIO6sGsiyf9UsbgG2itFL5wRAyuHsYH+zvH
AM6PATlsjSGcbwwKeGUjhzV2QIfZSzn8sSo41zHJyKGuBxgRlfIOGUo5FVWs
xg62s0Pnr85VcljVFOg5l8HYoX15+CkjFlW4+l23uv6mlms4/OIH2uhs5BAg
J5bl+1kLYj/QPlh8w9wD4wMA37PnHw==
                 "]}]}}, {
             ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}], AspectRatio -> Automatic, 
              ImageSize -> {20., 20.}, PlotRange -> {{0., 20.}, {0., 20.}}}], 
            
            GridBox[{{
               RowBox[{
                 TagBox["\"System: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PyYAML\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   PaneBox[
                   "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/bin/python\"", BaselinePosition -> 
                    Baseline], 
                   OutputForm[
                   "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/bin/python"], Editable -> False], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Active: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "PyYAML", "Exists"]], 
                    ExternalSessionObject["PyYAML"]["Active"], False], 
                    StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Evaluator: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/bin/python\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"PyYAML\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Epilog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Process: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["ProcessObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["36702", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Program: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["36702", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Parent PID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["36699", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"arnoudb\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Path: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Main/3.11/bin/python3.11\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Memory:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"32.325632`", "\"MB\"", "megabytes", 
                    "\"Megabytes\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Threads: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Start Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{"\"Thu 29 Feb 2024 15:50:11\"", 
                    StyleBox[
                    RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
                    StyleBox[
                    RowBox[{"-", "6"}], NumberMarks -> False, StripOnInput -> 
                    False]}], FontColor -> GrayLevel[0.5]]}], 
                    RowBox[{"DateObject", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"2024", ",", "2", ",", "29", ",", "15", ",", "50",
                     ",", "11"}], "}"}], ",", "\"Instant\"", ",", 
                    "\"Gregorian\"", ",", 
                    RowBox[{"-", "6.`"}]}], "]"}]}, "DateObject", Editable -> 
                    False], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"System Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.000623`5.", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"User Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"0.0018`5.", "\"s\"", "seconds", 
                    "\"Seconds\""}, "Quantity", SyntaxForm -> Mod], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Real Time: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{"3.`5.", "\"s\"", "seconds", "\"Seconds\""}, 
                    "Quantity", SyntaxForm -> Mod], "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   
                   ProcessObject[<|
                    "ManagedProcess" -> True, "UID" -> 0, "PID" -> 36702, 
                    "PPID" -> 36699, "Program" -> "python3.11", "Path" -> 
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Main/3.11/bin/python3.11", "User" -> "arnoudb", 
                    "StartTime" -> 
                    DateObject[{2024, 2, 29, 15, 50, 11}, "Instant", 
                    "Gregorian", -6.]|>], Selectable -> False, Editable -> 
                   False, SelectWithContents -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Prolog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ReturnType: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionEpilog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionProlog: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Automatic", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Socket: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["SocketObject", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["56837", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"c7ba689e-e84c-4735-ab73-4835bb21babc\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[
                    GeometricTransformationBox[{{{
                    FilledCurveBox[{{
                    
                    Line[{{36.558, 8.569}, {40.947, 8.569}, {40.947, 
                    43.684000000000005`}, {36.558, 43.684000000000005`}, {
                    36.558, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{59.053, 8.569}, {63.443, 8.569}, {63.443, 
                    43.684000000000005`}, {59.053, 43.684000000000005`}, {
                    59.053, 8.569}}]}}]}, {{
                    FilledCurveBox[{{
                    
                    Line[{{55.487, 8.569}, {56.95, 8.569}, {56.95, 
                    21.188000000000002`}, {55.487, 21.188000000000002`}, {
                    55.487, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{52.562, 8.569}, {54.025, 8.569}, {54.025, 
                    21.188000000000002`}, {52.562, 21.188000000000002`}, {
                    52.562, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{49.636, 8.569}, {51.099000000000004`, 8.569}, {
                    51.099000000000004`, 21.188000000000002`}, {49.636, 
                    21.188000000000002`}, {49.636, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{46.709, 8.569}, {48.172000000000004`, 8.569}, {
                    48.172000000000004`, 21.188000000000002`}, {46.709, 
                    21.188000000000002`}, {46.709, 8.569}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{43.783, 8.569}, {45.246, 8.569}, {45.246, 
                    21.188000000000002`}, {43.783, 21.188000000000002`}, {
                    43.783, 8.569}}]}}]}}, {
                    FilledCurveBox[{{
                    
                    Line[{{40.947, 4.911}, {59.787000000000006`, 4.911}, {
                    59.787000000000006`, 6.922}, {40.947, 6.922}, {40.947, 
                    4.911}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 31.675}, {56.678000000000004`, 31.675}, {
                    56.678000000000004`, 39.051}, {44.057, 39.051}, {44.057, 
                    31.675}}]}}]}, {
                    FilledCurveBox[{{
                    
                    Line[{{44.057, 43.685}, {56.678000000000004`, 43.685}, {
                    56.678000000000004`, 65.089}, {44.057, 65.089}, {44.057, 
                    43.685}}]}}]}}}, {{{1, 0}, {0, -1}}, Center}], {
                    ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])]}, PlotRange -> {{20, 80}, {0, 70}}, 
                    BaseStyle -> {CacheGraphics -> False}, ImageSize -> 30}], 
                    
                    GridBox[{{
                    RowBox[{
                    TagBox["\"IPAddress: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"127.0.0.1\"", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Port: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["56837", "SummaryItem"]}], 
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"ZMQ_PAIR\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"c7ba689e-e84c-4735-ab73-4835bb21babc\"", 
                    "SummaryItem"]}], "\[SpanFromLeft]", "\[SpanFromLeft]"}, {
                    
                    RowBox[{
                    TagBox["\"Endpoint: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"tcp://127.0.0.1:56837\"", "SummaryItem"]}], 
                    "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   SocketObject["c7ba689e-e84c-4735-ab73-4835bb21babc"], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"StandardErrorFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{
                    RowBox[{"Print", "[", 
                    StyleBox[
                    "#1", "Message", FontFamily -> "Source Code Pro", 
                    StripOnInput -> False], "]"}], "&"}], "SummaryItem"]}]}, {
              
               RowBox[{
                 TagBox[
                 "\"StandardOutputFunction: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["Print", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"EvaluationCount: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "PyYAML", "Exists"]], 
                    ExternalSessionObject["PyYAML"]["EvaluationCount"], None],
                     StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ProcessMemory: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "PyYAML", "Exists"]], 
                    Refresh[
                    ExternalSessionObject["PyYAML"]["ProcessMemory"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"ProcessThreads: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "PyYAML", "Exists"]], 
                    Refresh[
                    ExternalSessionObject["PyYAML"]["ProcessThreads"], 
                    UpdateInterval -> 5], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"SessionTime: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  DynamicBox[
                   ToBoxes[
                    If[
                    TrueQ[
                    ExternalEvaluate`Private`getSessionOpts[
                    "PyYAML", "Exists"]], 
                    Refresh[
                    ExternalSessionObject["PyYAML"]["SessionTime"], 
                    UpdateInterval -> 1], 
                    Missing["NotAvailable"]], StandardForm], 
                   TrackedSymbols :> {ExternalEvaluate`Private`$Links}], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ExternalSessionObject["PyYAML"],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.918226986544015*^9, 3.918226992381638*^9}, 
   3.918231487155772*^9, 3.9182320444704103`*^9, 3.918232124008645*^9, 
   3.918232214968581*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"f662a262-2dfa-46bf-9b6f-dda93655c4a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"session", ",", 
   RowBox[{"\"\<importyaml\>\"", "->", "\"\</Users/arnoudb/out.yaml\>\""}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.918226992961768*^9, 3.918227011952046*^9}, {
  3.9182320393227367`*^9, 3.9182320395330257`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"a3430444-42ab-4836-88e8-d1a31375599f"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"'NoneType' object is not iterable\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"'NoneType' object is not iterable\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"TypeError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"'NoneType' object is not iterable\""}, "RowDefault"]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"TypeError\"", "\" \"", 
                    "\"'NoneType' object is not iterable\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  16.  \""}, {"\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      __traceback_hidden_variables__ = True\""}, {
                    "\"  21.  \""}, {"\"  22.      try:\""}, {
                    ItemBox[
                    "\"  23.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  24.      except Exception as export_exception:\""}, {
                    "\"  25.          try:\""}, {
                    "\"  26.              try:\""}, {"\"  27.  \""}, {
                    "\"  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  29.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"handle_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 130.  \""}, {"\" 131.  \""}, {
                    "\" 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):\""}, {"\" 133.  \""}, {
                    "\" 134.      __traceback_hidden_variables__ = True\""}, {
                    "\" 135.  \""}, {
                    "\" 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\""}, {
                    ItemBox[
                    "\" 137.      result = evaluate_message(**message)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 138.  \""}, {
                    "\" 139.      sys.stdout.flush()\""}, {
                    "\" 140.      return result\""}, {"\" 141.  \""}, {
                    "\" 142.  \""}, {
                    "\" 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"evaluate_message\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless", Evaluator -> Automatic, 
                    Method -> "Preemptive"], "\" in \"", 
                    "\"evaluate_message\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 116.  \""}, {
                    "\" 117.      if isinstance(input, \
six.string_types):\""}, {
                    "\" 118.          result = execute_from_string(input, \
**opts)\""}, {"\" 119.  \""}, {
                    "\" 120.      if isinstance(args, (list, tuple)):\""}, {
                    "\" 121.          # then we have a function call to \
do\""}, {"\" 122.          # first get the function object we need to \
call\""}, {
                    ItemBox["\" 123.          result = result(*args)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 124.  \""}, {
                    "\" 125.      if return_type == \\\"string\\\":\""}, {
                    "\" 126.          # bug 354267 repr returns a 'str' even \
on py2 (i.e. bytes).\""}, {
                    "\" 127.          result = force_text(repr(result))\""}, {
                    "\" 128.  \""}, {"\" 129.      return result\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "evaluate_message"}], 
                    Column[{
                    
                    Column[{" 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    " 118.          result = execute_from_string(input, \
**opts)", " 119.  ", " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", 
                    Item[" 123.          result = result(*args)", Background -> 
                    LightYellow], " 124.  ", 
                    " 125.      if return_type == \"string\":", 
                    " 126.          # bug 354267 repr returns a 'str' even on \
py2 (i.e. bytes).", " 127.          result = force_text(repr(result))", 
                    " 128.  ", " 129.      return result"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"importyaml\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"importyaml\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    "\"   5.  importyaml\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"file\"", 
                    "\"/Users/arnoudb/out.yaml\""}, {"\"stream\"", 
                    "\"<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"file", 
                    "/Users/arnoudb/out.yaml"}, {"stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"importyaml", 
                    Column[{
                    Column[{
                    Item["   5.  importyaml", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"file", 
                    "/Users/arnoudb/out.yaml"}, {
                    "stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"load\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"load\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  74.  def load(stream, Loader):\""}, {
                    "\"  75.      \\\"\\\"\\\"\""}, {
                    "\"  76.      Parse the first YAML document in a \
stream\""}, {"\"  77.      and produce the corresponding Python object.\""}, {
                    "\"  78.      \\\"\\\"\\\"\""}, {
                    "\"  79.      loader = Loader(stream)\""}, {
                    "\"  80.      try:\""}, {
                    ItemBox[
                    "\"  81.          return loader.get_single_data()\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\"  82.      finally:\""}, {
                    "\"  83.          loader.dispose()\""}, {"\"  84.  \""}, {
                    "\"  85.  def load_all(stream, Loader):\""}, {
                    "\"  86.      \\\"\\\"\\\"\""}, {
                    "\"  87.      Parse all YAML documents in a stream\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"stream\"", 
                    "\"<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>\""}, {"\"Loader\"", 
                    "\"<class 'yaml.loader.Loader'>\""}, {"\"loader\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}, {"Loader", "<class 'yaml.loader.Loader'>"}, {
                    "loader", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless"], " in ", "load"}], 
                    Column[{
                    
                    Column[{"  74.  def load(stream, Loader):", 
                    "  75.      \"\"\"", 
                    "  76.      Parse the first YAML document in a stream", 
                    "  77.      and produce the corresponding Python object.",
                     "  78.      \"\"\"", 
                    "  79.      loader = Loader(stream)", "  80.      try:", 
                    Item[
                    "  81.          return loader.get_single_data()", 
                    Background -> LightYellow], "  82.      finally:", 
                    "  83.          loader.dispose()", "  84.  ", 
                    "  85.  def load_all(stream, Loader):", 
                    "  86.      \"\"\"", 
                    "  87.      Parse all YAML documents in a stream"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}, {"Loader", "<class 'yaml.loader.Loader'>"}, {
                    "loader", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"get_single_data\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"get_single_data\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  44.          if self.check_node():\""}, {
                    "\"  45.              return \
self.construct_document(self.get_node())\""}, {"\"  46.  \""}, {
                    "\"  47.      def get_single_data(self):\""}, {
                    "\"  48.          # Ensure that the stream contains a \
single document and construct it.\""}, {
                    "\"  49.          node = self.get_single_node()\""}, {
                    "\"  50.          if node is not None:\""}, {
                    ItemBox[
                    "\"  51.              return \
self.construct_document(node)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> 
                    False]}, {"\"  52.          return None\""}, {
                    "\"  53.  \""}, {
                    "\"  54.      def construct_document(self, node):\""}, {
                    "\"  55.          data = self.construct_object(node)\""}, \
{"\"  56.          while self.state_generators:\""}, {
                    "\"  57.              state_generators = \
self.state_generators\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "get_single_data"}], 
                    Column[{
                    
                    Column[{"  44.          if self.check_node():", 
                    "  45.              return \
self.construct_document(self.get_node())", "  46.  ", 
                    "  47.      def get_single_data(self):", 
                    "  48.          # Ensure that the stream contains a \
single document and construct it.", 
                    "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    Item[
                    "  51.              return self.construct_document(node)",
                     Background -> LightYellow], "  52.          return None",
                     "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    "  55.          data = self.construct_object(node)", 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_document\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_document\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  48.          # Ensure that the stream contains a \
single document and construct it.\""}, {
                    "\"  49.          node = self.get_single_node()\""}, {
                    "\"  50.          if node is not None:\""}, {
                    "\"  51.              return \
self.construct_document(node)\""}, {"\"  52.          return None\""}, {
                    "\"  53.  \""}, {
                    "\"  54.      def construct_document(self, node):\""}, {
                    ItemBox[
                    "\"  55.          data = self.construct_object(node)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  56.          while self.state_generators:\""}, {
                    "\"  57.              state_generators = \
self.state_generators\""}, {
                    "\"  58.              self.state_generators = []\""}, {
                    "\"  59.              for generator in \
state_generators:\""}, {
                    "\"  60.                  for dummy in generator:\""}, {
                    "\"  61.                      pass\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_document"}], 
                    Column[{
                    
                    Column[{
                    "  48.          # Ensure that the stream contains a \
single document and construct it.", 
                    "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    "  51.              return self.construct_document(node)",
                     "  52.          return None", "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    Item[
                    "  55.          data = self.construct_object(node)", 
                    Background -> LightYellow], 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators", "  58.              self.state_generators = []", 
                    "  59.              for generator in state_generators:", 
                    "  60.                  for dummy in generator:", 
                    "  61.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    "\"  93.                  elif isinstance(node, \
ScalarNode):\""}, {
                    "\"  94.                      constructor = \
self.__class__.construct_scalar\""}, {
                    "\"  95.                  elif isinstance(node, \
SequenceNode):\""}, {
                    "\"  96.                      constructor = \
self.__class__.construct_sequence\""}, {
                    "\"  97.                  elif isinstance(node, \
MappingNode):\""}, {
                    "\"  98.                      constructor = \
self.__class__.construct_mapping\""}, {
                    "\"  99.          if tag_suffix is None:\""}, {
                    ItemBox[
                    "\" 100.              data = constructor(self, node)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 101.          else:\""}, {
                    "\" 102.              data = constructor(self, \
tag_suffix, node)\""}, {
                    "\" 103.          if isinstance(data, \
types.GeneratorType):\""}, {"\" 104.              generator = data\""}, {
                    "\" 105.              data = next(generator)\""}, {
                    "\" 106.              if self.deep_construct:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])\""}, {
                    "\"deep\"", "\"False\""}, {"\"constructor\"", 
                    "\"<function FullConstructor.construct_python_tuple at \
0x10479f2e0>\""}, {"\"tag_suffix\"", "\"None\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    Column[{
                    "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_python_tuple\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_python_tuple\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 516.      def construct_python_long(self, node):\""}, \
{"\" 517.          return self.construct_yaml_int(node)\""}, {
                    "\" 518.  \""}, {
                    "\" 519.      def construct_python_complex(self, \
node):\""}, {
                    "\" 520.         return \
complex(self.construct_scalar(node))\""}, {"\" 521.  \""}, {
                    "\" 522.      def construct_python_tuple(self, \
node):\""}, {
                    ItemBox[
                    "\" 523.          return \
tuple(self.construct_sequence(node))\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 524.  \""}, {
                    "\" 525.      def find_python_module(self, name, mark, \
unsafe=False):\""}, {"\" 526.          if not name:\""}, {
                    "\" 527.              raise ConstructorError(\\\"while \
constructing a Python module\\\", mark,\""}, {
                    "\" 528.                      \\\"expected non-empty name \
appended to the tag\\\", mark)\""}, {"\" 529.          if unsafe:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_tuple"}], 
                    Column[{
                    
                    Column[{
                    " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_sequence\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_sequence\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 122.          return node.value\""}, {
                    "\" 123.  \""}, {
                    "\" 124.      def construct_sequence(self, node, \
deep=False):\""}, {
                    "\" 125.          if not isinstance(node, \
SequenceNode):\""}, {
                    "\" 126.              raise ConstructorError(None, \
None,\""}, {
                    "\" 127.                      \\\"expected a sequence \
node, but found %s\\\" % node.id,\""}, {
                    "\" 128.                      node.start_mark)\""}, {
                    ItemBox[
                    "\" 129.          return [self.construct_object(child, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 130.                  for child in node.value]\""}, {
                    "\" 131.  \""}, {
                    "\" 132.      def construct_mapping(self, node, \
deep=False):\""}, {
                    "\" 133.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 134.              raise ConstructorError(None, \
None,\""}, {
                    "\" 135.                      \\\"expected a mapping \
node, but found %s\\\" % node.id,\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])\""}, {
                    "\"deep\"", "\"False\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<listcomp>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<listcomp>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 122.          return node.value\""}, {
                    "\" 123.  \""}, {
                    "\" 124.      def construct_sequence(self, node, \
deep=False):\""}, {
                    "\" 125.          if not isinstance(node, \
SequenceNode):\""}, {
                    "\" 126.              raise ConstructorError(None, \
None,\""}, {
                    "\" 127.                      \\\"expected a sequence \
node, but found %s\\\" % node.id,\""}, {
                    "\" 128.                      node.start_mark)\""}, {
                    ItemBox[
                    "\" 129.          return [self.construct_object(child, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 130.                  for child in node.value]\""}, {
                    "\" 131.  \""}, {
                    "\" 132.      def construct_mapping(self, node, \
deep=False):\""}, {
                    "\" 133.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 134.              raise ConstructorError(None, \
None,\""}, {
                    "\" 135.                      \\\"expected a mapping \
node, but found %s\\\" % node.id,\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<list_iterator object at 0x1047fa320>\""}, {
                    "\"child\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<list_iterator object at 0x1047fa320>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<list_iterator object at 0x1047fa320>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.                  elif isinstance(node, \
SequenceNode):\""}, {
                    "\"  96.                      constructor = \
self.__class__.construct_sequence\""}, {
                    "\"  97.                  elif isinstance(node, \
MappingNode):\""}, {
                    "\"  98.                      constructor = \
self.__class__.construct_mapping\""}, {
                    "\"  99.          if tag_suffix is None:\""}, {
                    "\" 100.              data = constructor(self, node)\""}, \
{"\" 101.          else:\""}, {
                    ItemBox[
                    "\" 102.              data = constructor(self, \
tag_suffix, node)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\" 103.          if isinstance(data, \
types.GeneratorType):\""}, {"\" 104.              generator = data\""}, {
                    "\" 105.              data = next(generator)\""}, {
                    "\" 106.              if self.deep_construct:\""}, {
                    "\" 107.                  for dummy in generator:\""}, {
                    "\" 108.                      pass\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"constructor\"", 
                    "\"<function FullConstructor.construct_python_object_new \
at 0x10479f880>\""}, {"\"tag_suffix\"", 
                    "\"wolframclient.language.expression.WLFunction\""}, {
                    "\"tag_prefix\"", 
                    "\"tag:yaml.org,2002:python/object/new:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_new\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_new\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 652.              instance.extend(listitems)\""}, {
                    "\" 653.          if dictitems:\""}, {
                    "\" 654.              for key in dictitems:\""}, {
                    "\" 655.                  instance[key] = \
dictitems[key]\""}, {"\" 656.          return instance\""}, {"\" 657.  \""}, {
                    "\" 658.      def construct_python_object_new(self, \
suffix, node):\""}, {
                    ItemBox[
                    "\" 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 660.  \""}, {
                    "\" 661.  FullConstructor.add_constructor(\""}, {
                    "\" 662.      'tag:yaml.org,2002:python/none',\""}, {
                    "\" 663.      FullConstructor.construct_yaml_null)\""}, {
                    "\" 664.  \""}, {
                    "\" 665.  FullConstructor.add_constructor(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"suffix\"", 
                    "\"wolframclient.language.expression.WLFunction\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_new"}], 
                    Column[{
                    
                    Column[{" 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_apply\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_apply\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 635.          if isinstance(node, SequenceNode):\""}, \
{"\" 636.              args = self.construct_sequence(node, deep=True)\""}, {
                    "\" 637.              kwds = {}\""}, {
                    "\" 638.              state = {}\""}, {
                    "\" 639.              listitems = []\""}, {
                    "\" 640.              dictitems = {}\""}, {
                    "\" 641.          else:\""}, {
                    ItemBox[
                    "\" 642.              value = \
self.construct_mapping(node, deep=True)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 643.              args = value.get('args', [])\""}, {
                    "\" 644.              kwds = value.get('kwds', {})\""}, {
                    "\" 645.              state = value.get('state', {})\""}, \
{"\" 646.              listitems = value.get('listitems', [])\""}, {
                    "\" 647.              dictitems = value.get('dictitems', \
{})\""}, {
                    "\" 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"suffix\"", 
                    "\"wolframclient.language.expression.WLFunction\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}, {
                    "\"newobj\"", "\"True\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "newobj", "True"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_apply"}], 
                    Column[{
                    
                    Column[{
                    " 635.          if isinstance(node, SequenceNode):", 
                    " 636.              args = self.construct_sequence(node, \
deep=True)", " 637.              kwds = {}", " 638.              state = {}", 
                    " 639.              listitems = []", 
                    " 640.              dictitems = {}", 
                    " 641.          else:", 
                    Item[
                    " 642.              value = self.construct_mapping(node, \
deep=True)", Background -> LightYellow], 
                    " 643.              args = value.get('args', [])", 
                    " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "newobj", "True"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 211.                  index += 1\""}, {
                    "\" 212.          if merge:\""}, {
                    "\" 213.              node.value = merge + \
node.value\""}, {"\" 214.  \""}, {
                    "\" 215.      def construct_mapping(self, node, \
deep=False):\""}, {"\" 216.          if isinstance(node, MappingNode):\""}, {
                    "\" 217.              self.flatten_mapping(node)\""}, {
                    ItemBox[
                    "\" 218.          return super().construct_mapping(node, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 219.  \""}, {
                    "\" 220.      def construct_yaml_null(self, node):\""}, {
                    "\" 221.          self.construct_scalar(node)\""}, {
                    "\" 222.          return None\""}, {"\" 223.  \""}, {
                    "\" 224.      bool_values = {\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}, {
                    "\"deep\"", "\"True\""}, {"\"__class__\"", 
                    "\"<class 'yaml.constructor.SafeConstructor'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 136.                      node.start_mark)\""}, {
                    "\" 137.          mapping = {}\""}, {
                    "\" 138.          for key_node, value_node in node.value:\
\""}, {"\" 139.              key = self.construct_object(key_node, deep=deep)\
\""}, {"\" 140.              if not isinstance(key, \
collections.abc.Hashable):\""}, {
                    "\" 141.                  raise \
ConstructorError(\\\"while constructing a mapping\\\", node.start_mark,\""}, {
                    "\" 142.                          \\\"found unhashable \
key\\\", key_node.start_mark)\""}, {
                    ItemBox[
                    "\" 143.              value = \
self.construct_object(value_node, deep=deep)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 144.              mapping[key] = value\""}, {
                    "\" 145.          return mapping\""}, {"\" 146.  \""}, {
                    "\" 147.      def construct_pairs(self, node, \
deep=False):\""}, {
                    "\" 148.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 149.              raise ConstructorError(None, \
None,\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])\""}, {
                    "\"deep\"", "\"True\""}, {"\"mapping\"", "\"{}\""}, {
                    "\"key_node\"", 
                    "\"ScalarNode(tag='tag:yaml.org,2002:str', value='state')\
\""}, {"\"value_node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])\""}, {
                    "\"key\"", "\"state\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"mapping", "{}"}, {"key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', \
value='state')"}, {"value_node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "key", "state"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"mapping", "{}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', \
value='state')"}, {"value_node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "key", "state"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  93.                  elif isinstance(node, \
ScalarNode):\""}, {
                    "\"  94.                      constructor = \
self.__class__.construct_scalar\""}, {
                    "\"  95.                  elif isinstance(node, \
SequenceNode):\""}, {
                    "\"  96.                      constructor = \
self.__class__.construct_sequence\""}, {
                    "\"  97.                  elif isinstance(node, \
MappingNode):\""}, {
                    "\"  98.                      constructor = \
self.__class__.construct_mapping\""}, {
                    "\"  99.          if tag_suffix is None:\""}, {
                    ItemBox[
                    "\" 100.              data = constructor(self, node)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 101.          else:\""}, {
                    "\" 102.              data = constructor(self, \
tag_suffix, node)\""}, {
                    "\" 103.          if isinstance(data, \
types.GeneratorType):\""}, {"\" 104.              generator = data\""}, {
                    "\" 105.              data = next(generator)\""}, {
                    "\" 106.              if self.deep_construct:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])\""}, {
                    "\"deep\"", "\"True\""}, {"\"old_deep\"", "\"False\""}, {
                    "\"constructor\"", 
                    "\"<function FullConstructor.construct_python_tuple at \
0x10479f2e0>\""}, {"\"tag_suffix\"", "\"None\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "True"}, {"old_deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "True"}, {"old_deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_python_tuple\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_python_tuple\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 516.      def construct_python_long(self, node):\""}, \
{"\" 517.          return self.construct_yaml_int(node)\""}, {
                    "\" 518.  \""}, {
                    "\" 519.      def construct_python_complex(self, \
node):\""}, {
                    "\" 520.         return \
complex(self.construct_scalar(node))\""}, {"\" 521.  \""}, {
                    "\" 522.      def construct_python_tuple(self, \
node):\""}, {
                    ItemBox[
                    "\" 523.          return \
tuple(self.construct_sequence(node))\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 524.  \""}, {
                    "\" 525.      def find_python_module(self, name, mark, \
unsafe=False):\""}, {"\" 526.          if not name:\""}, {
                    "\" 527.              raise ConstructorError(\\\"while \
constructing a Python module\\\", mark,\""}, {
                    "\" 528.                      \\\"expected non-empty name \
appended to the tag\\\", mark)\""}, {"\" 529.          if unsafe:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> 
                    {{Automatic}}}, GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_tuple"}], 
                    Column[{
                    
                    Column[{
                    " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_sequence\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_sequence\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 122.          return node.value\""}, {
                    "\" 123.  \""}, {
                    "\" 124.      def construct_sequence(self, node, \
deep=False):\""}, {
                    "\" 125.          if not isinstance(node, \
SequenceNode):\""}, {
                    "\" 126.              raise ConstructorError(None, \
None,\""}, {
                    "\" 127.                      \\\"expected a sequence \
node, but found %s\\\" % node.id,\""}, {
                    "\" 128.                      node.start_mark)\""}, {
                    ItemBox[
                    "\" 129.          return [self.construct_object(child, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 130.                  for child in node.value]\""}, {
                    "\" 131.  \""}, {
                    "\" 132.      def construct_mapping(self, node, \
deep=False):\""}, {
                    "\" 133.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 134.              raise ConstructorError(None, \
None,\""}, {
                    "\" 135.                      \\\"expected a mapping \
node, but found %s\\\" % node.id,\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])\""}, {
                    "\"deep\"", "\"False\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<listcomp>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<listcomp>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 122.          return node.value\""}, {
                    "\" 123.  \""}, {
                    "\" 124.      def construct_sequence(self, node, \
deep=False):\""}, {
                    "\" 125.          if not isinstance(node, \
SequenceNode):\""}, {
                    "\" 126.              raise ConstructorError(None, \
None,\""}, {
                    "\" 127.                      \\\"expected a sequence \
node, but found %s\\\" % node.id,\""}, {
                    "\" 128.                      node.start_mark)\""}, {
                    ItemBox[
                    "\" 129.          return [self.construct_object(child, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 130.                  for child in node.value]\""}, {
                    "\" 131.  \""}, {
                    "\" 132.      def construct_mapping(self, node, \
deep=False):\""}, {
                    "\" 133.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 134.              raise ConstructorError(None, \
None,\""}, {
                    "\" 135.                      \\\"expected a mapping \
node, but found %s\\\" % node.id,\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<list_iterator object at 0x1047f90f0>\""}, {
                    "\"child\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<list_iterator object at 0x1047f90f0>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<list_iterator object at 0x1047f90f0>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 100.              data = constructor(self, node)\""}, \
{"\" 101.          else:\""}, {
                    "\" 102.              data = constructor(self, \
tag_suffix, node)\""}, {
                    "\" 103.          if isinstance(data, \
types.GeneratorType):\""}, {"\" 104.              generator = data\""}, {
                    "\" 105.              data = next(generator)\""}, {
                    "\" 106.              if self.deep_construct:\""}, {
                    ItemBox[
                    "\" 107.                  for dummy in generator:\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 108.                      pass\""}, {
                    "\" 109.              else:\""}, {
                    "\" 110.                  \
self.state_generators.append(generator)\""}, {
                    "\" 111.          self.constructed_objects[node] = \
data\""}, {"\" 112.          del self.recursive_objects[node]\""}, {
                    "\" 113.          if deep:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"constructor\"", 
                    "\"<function SafeConstructor.construct_yaml_map at \
0x10479ec00>\""}, {"\"tag_suffix\"", "\"None\""}, {"\"data\"", "\"{}\""}, {
                    "\"generator\"", 
                    "\"<generator object SafeConstructor.construct_yaml_map \
at 0x10473af80>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function SafeConstructor.construct_yaml_map at \
0x10479ec00>"}, {"tag_suffix", "None"}, {"data", "{}"}, {
                    "generator", 
                    "<generator object SafeConstructor.construct_yaml_map at \
0x10473af80>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    Item[
                    " 107.                  for dummy in generator:", 
                    Background -> LightYellow], 
                    " 108.                      pass", 
                    " 109.              else:", 
                    " 110.                  \
self.state_generators.append(generator)", 
                    " 111.          self.constructed_objects[node] = data", 
                    " 112.          del self.recursive_objects[node]", 
                    " 113.          if deep:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function SafeConstructor.construct_yaml_map at \
0x10479ec00>"}, {"tag_suffix", "None"}, {"data", "{}"}, {
                    "generator", 
                    "<generator object SafeConstructor.construct_yaml_map at \
0x10473af80>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_yaml_map\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_yaml_map\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 406.          data = []\""}, {
                    "\" 407.          yield data\""}, {
                    "\" 408.          \
data.extend(self.construct_sequence(node))\""}, {"\" 409.  \""}, {
                    "\" 410.      def construct_yaml_map(self, node):\""}, {
                    "\" 411.          data = {}\""}, {
                    "\" 412.          yield data\""}, {
                    ItemBox[
                    "\" 413.          value = self.construct_mapping(node)\"",
                     Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 414.          data.update(value)\""}, {
                    "\" 415.  \""}, {
                    "\" 416.      def construct_yaml_object(self, node, cls):\
\""}, {"\" 417.          data = cls.__new__(cls)\""}, {
                    "\" 418.          yield data\""}, {
                    "\" 419.          if hasattr(data, '__setstate__'):\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])\""}, {
                    "\"data\"", "\"{}\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "data", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_yaml_map"}], 
                    Column[{
                    
                    Column[{" 406.          data = []", 
                    " 407.          yield data", 
                    " 408.          \
data.extend(self.construct_sequence(node))", " 409.  ", 
                    " 410.      def construct_yaml_map(self, node):", 
                    " 411.          data = {}", " 412.          yield data", 
                    Item[
                    " 413.          value = self.construct_mapping(node)", 
                    Background -> LightYellow], 
                    " 414.          data.update(value)", " 415.  ", 
                    " 416.      def construct_yaml_object(self, node, cls):", 
                    " 417.          data = cls.__new__(cls)", 
                    " 418.          yield data", 
                    " 419.          if hasattr(data, '__setstate__'):"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "data", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 211.                  index += 1\""}, {
                    "\" 212.          if merge:\""}, {
                    "\" 213.              node.value = merge + \
node.value\""}, {"\" 214.  \""}, {
                    "\" 215.      def construct_mapping(self, node, \
deep=False):\""}, {"\" 216.          if isinstance(node, MappingNode):\""}, {
                    "\" 217.              self.flatten_mapping(node)\""}, {
                    ItemBox[
                    "\" 218.          return super().construct_mapping(node, \
deep=deep)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 219.  \""}, {
                    "\" 220.      def construct_yaml_null(self, node):\""}, {
                    "\" 221.          self.construct_scalar(node)\""}, {
                    "\" 222.          return None\""}, {"\" 223.  \""}, {
                    "\" 224.      bool_values = {\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"__class__\"", 
                    "\"<class 'yaml.constructor.SafeConstructor'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_mapping\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 136.                      node.start_mark)\""}, {
                    "\" 137.          mapping = {}\""}, {
                    
                    "\" 138.          for key_node, value_node in node.value:\
\""}, {"\" 139.              key = self.construct_object(key_node, deep=deep)\
\""}, {"\" 140.              if not isinstance(key, \
collections.abc.Hashable):\""}, {
                    "\" 141.                  raise \
ConstructorError(\\\"while constructing a mapping\\\", node.start_mark,\""}, {
                    "\" 142.                          \\\"found unhashable \
key\\\", key_node.start_mark)\""}, {
                    ItemBox[
                    "\" 143.              value = \
self.construct_object(value_node, deep=deep)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 144.              mapping[key] = value\""}, {
                    "\" 145.          return mapping\""}, {"\" 146.  \""}, {
                    "\" 147.      def construct_pairs(self, node, \
deep=False):\""}, {
                    "\" 148.          if not isinstance(node, \
MappingNode):\""}, {
                    "\" 149.              raise ConstructorError(None, \
None,\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"mapping\"", 
                    "\"{'args': ('a', 1)}\""}, {"\"key_node\"", 
                    "\"ScalarNode(tag='tag:yaml.org,2002:str', \
value='head')\""}, {"\"value_node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])\""}, {
                    "\"key\"", "\"head\""}, {"\"value\"", "\"('a', 1)\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"mapping", "{'args': ('a', 1)}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', value='head')"}, \
{"value_node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "key", "head"}, {"value", "('a', 1)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"mapping", "{'args': ('a', 1)}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', value='head')"}, \
{"value_node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "key", "head"}, {"value", "('a', 1)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"construct_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.                  elif isinstance(node, \
SequenceNode):\""}, {
                    "\"  96.                      constructor = \
self.__class__.construct_sequence\""}, {
                    "\"  97.                  elif isinstance(node, \
MappingNode):\""}, {
                    "\"  98.                      constructor = \
self.__class__.construct_mapping\""}, {
                    "\"  99.          if tag_suffix is None:\""}, {
                    "\" 100.              data = constructor(self, node)\""}, \
{"\" 101.          else:\""}, {
                    ItemBox[
                    "\" 102.              data = constructor(self, \
tag_suffix, node)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\" 103.          if isinstance(data, \
types.GeneratorType):\""}, {"\" 104.              generator = data\""}, {
                    "\" 105.              data = next(generator)\""}, {
                    "\" 106.              if self.deep_construct:\""}, {
                    "\" 107.                  for dummy in generator:\""}, {
                    "\" 108.                      pass\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])\""}, {
                    "\"deep\"", "\"False\""}, {"\"constructor\"", 
                    "\"<function FullConstructor.construct_python_object_new \
at 0x10479f880>\""}, {"\"tag_suffix\"", 
                    "\"wolframclient.language.expression.WLSymbol\""}, {
                    "\"tag_prefix\"", 
                    "\"tag:yaml.org,2002:python/object/new:\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLSymbol"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "deep", "False"}, {"constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLSymbol"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_new\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_new\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 652.              instance.extend(listitems)\""}, {
                    "\" 653.          if dictitems:\""}, {
                    "\" 654.              for key in dictitems:\""}, {
                    "\" 655.                  instance[key] = \
dictitems[key]\""}, {"\" 656.          return instance\""}, {"\" 657.  \""}, {
                    "\" 658.      def construct_python_object_new(self, \
suffix, node):\""}, {
                    ItemBox[
                    "\" 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 660.  \""}, {
                    "\" 661.  FullConstructor.add_constructor(\""}, {
                    "\" 662.      'tag:yaml.org,2002:python/none',\""}, {
                    "\" 663.      FullConstructor.construct_yaml_null)\""}, {
                    "\" 664.  \""}, {
                    "\" 665.  FullConstructor.add_constructor(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"suffix\"", 
                    "\"wolframclient.language.expression.WLSymbol\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_new"}], 
                    Column[{
                    
                    Column[{" 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_apply\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"construct_python_object_apply\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    "\" 643.              args = value.get('args', [])\""}, {
                    "\" 644.              kwds = value.get('kwds', {})\""}, {
                    "\" 645.              state = value.get('state', {})\""}, \
{"\" 646.              listitems = value.get('listitems', [])\""}, {
                    "\" 647.              dictitems = value.get('dictitems', \
{})\""}, {
                    "\" 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)\""}, {
                    "\" 649.          if state:\""}, {
                    ItemBox[
                    "\" 650.              \
self.set_python_instance_state(instance, state)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 651.          if listitems:\""}, {
                    "\" 652.              instance.extend(listitems)\""}, {
                    "\" 653.          if dictitems:\""}, {
                    "\" 654.              for key in dictitems:\""}, {
                    "\" 655.                  instance[key] = \
dictitems[key]\""}, {"\" 656.          return instance\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"suffix\"", 
                    "\"wolframclient.language.expression.WLSymbol\""}, {
                    "\"node\"", 
                    "\"MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])\""}, {
                    "\"newobj\"", "\"True\""}, {"\"args\"", "\"[]\""}, {
                    "\"kwds\"", "\"{}\""}, {"\"state\"", 
                    "\"(None, {'name': 'Rule'})\""}, {"\"listitems\"", 
                    "\"[]\""}, {"\"dictitems\"", "\"{}\""}, {"\"value\"", 
                    "\"{'state': (None, {'name': 'Rule'})}\""}, {
                    "\"instance\"", 
                    "\"<unprintable obj: 'WLSymbol' object has no attribute \
'name'>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "newobj", "True"}, {"args", "[]"}, {"kwds", "{}"}, {
                    "state", "(None, {'name': 'Rule'})"}, {
                    "listitems", "[]"}, {"dictitems", "{}"}, {
                    "value", "{'state': (None, {'name': 'Rule'})}"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_apply"}], 
                    Column[{
                    
                    Column[{" 643.              args = value.get('args', [])",
                     " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)", 
                    " 649.          if state:", 
                    Item[
                    " 650.              \
self.set_python_instance_state(instance, state)", Background -> LightYellow], 
                    " 651.          if listitems:", 
                    " 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "newobj", "True"}, {"args", "[]"}, {"kwds", "{}"}, {
                    "state", "(None, {'name': 'Rule'})"}, {
                    "listitems", "[]"}, {"dictitems", "{}"}, {
                    "value", "{'state': (None, {'name': 'Rule'})}"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"set_python_instance_state\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"set_python_instance_state\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 719.          return super(UnsafeConstructor, \
self).find_python_name(name, mark, unsafe=True)\""}, {"\" 720.  \""}, {
                    "\" 721.      def make_python_instance(self, suffix, \
node, args=None, kwds=None, newobj=False):\""}, {
                    "\" 722.          return super(UnsafeConstructor, \
self).make_python_instance(\""}, {
                    "\" 723.              suffix, node, args, kwds, newobj, \
unsafe=True)\""}, {"\" 724.  \""}, {
                    "\" 725.      def set_python_instance_state(self, \
instance, state):\""}, {
                    ItemBox[
                    "\" 726.          return super(UnsafeConstructor, \
self).set_python_instance_state(\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> 
                    False]}, {
                    "\" 727.              instance, state, unsafe=True)\""}, {
                    "\" 728.  \""}, {
                    "\" 729.  UnsafeConstructor.add_multi_constructor(\""}, {
                    "\" 730.      'tag:yaml.org,2002:python/module:',\""}, {
                    "\" 731.      \
UnsafeConstructor.construct_python_module)\""}, {"\" 732.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"instance\"", 
                    "\"<unprintable obj: 'WLSymbol' object has no attribute \
'name'>\""}, {"\"state\"", "\"(None, {'name': 'Rule'})\""}, {"\"__class__\"", 
                    "\"<class 'yaml.constructor.UnsafeConstructor'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "(None, {'name': 'Rule'})"}, {"__class__", 
                    "<class 'yaml.constructor.UnsafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "set_python_instance_state"}], 
                    Column[{
                    
                    Column[{
                    " 719.          return super(UnsafeConstructor, \
self).find_python_name(name, mark, unsafe=True)", " 720.  ", 
                    " 721.      def make_python_instance(self, suffix, node, \
args=None, kwds=None, newobj=False):", 
                    " 722.          return super(UnsafeConstructor, \
self).make_python_instance(", 
                    " 723.              suffix, node, args, kwds, newobj, \
unsafe=True)", " 724.  ", 
                    " 725.      def set_python_instance_state(self, instance, \
state):", 
                    Item[
                    " 726.          return super(UnsafeConstructor, \
self).set_python_instance_state(", Background -> LightYellow], 
                    " 727.              instance, state, unsafe=True)", 
                    " 728.  ", 
                    " 729.  UnsafeConstructor.add_multi_constructor(", 
                    " 730.      'tag:yaml.org,2002:python/module:',", 
                    " 731.      UnsafeConstructor.construct_python_module)", 
                    " 732.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "(None, {'name': 'Rule'})"}, {
                    "__class__", 
                    "<class 'yaml.constructor.UnsafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"set_python_instance_state\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", 
                    "\"set_python_instance_state\""}, "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 599.              slotstate = {}\""}, {
                    "\" 600.              if isinstance(state, tuple) and \
len(state) == 2:\""}, {
                    "\" 601.                  state, slotstate = state\""}, {
                    "\" 602.              if hasattr(instance, \
'__dict__'):\""}, {"\" 603.                  if not unsafe and state:\""}, {
                    "\" 604.                      for key in \
state.keys():\""}, {
                    "\" 605.                          \
self.check_state_key(key)\""}, {
                    ItemBox[
                    "\" 606.                  instance.__dict__.update(state)\
\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 607.              elif state:\""}, {
                    "\" 608.                  slotstate.update(state)\""}, {
                    "\" 609.              for key, value in \
slotstate.items():\""}, {"\" 610.                  if not unsafe:\""}, {
                    "\" 611.                      \
self.check_state_key(key)\""}, {
                    "\" 612.                  setattr(instance, key, \
value)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<yaml.loader.Loader object at 0x1045ab6d0>\""}, {
                    "\"instance\"", 
                    "\"<unprintable obj: 'WLSymbol' object has no attribute \
'name'>\""}, {"\"state\"", "\"None\""}, {"\"unsafe\"", "\"True\""}, {
                    "\"slotstate\"", "\"{'name': 'Rule'}\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "None"}, {"unsafe", "True"}, {"slotstate", 
                    "{'name': 'Rule'}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "set_python_instance_state"}], 
                    Column[{
                    
                    Column[{" 599.              slotstate = {}", 
                    " 600.              if isinstance(state, tuple) and \
len(state) == 2:", " 601.                  state, slotstate = state", 
                    " 602.              if hasattr(instance, '__dict__'):", 
                    " 603.                  if not unsafe and state:", 
                    " 604.                      for key in state.keys():", 
                    " 605.                          \
self.check_state_key(key)", 
                    Item[
                    " 606.                  instance.__dict__.update(state)", 
                    Background -> LightYellow], 
                    " 607.              elif state:", 
                    " 608.                  slotstate.update(state)", 
                    " 609.              for key, value in slotstate.items():",
                     " 610.                  if not unsafe:", 
                    " 611.                      self.check_state_key(key)", 
                    " 612.                  setattr(instance, key, value)"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "None"}, {"unsafe", "True"}, {
                    "slotstate", "{'name': 'Rule'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    
                    Row[{"TypeError", " ", 
                    "'NoneType' object is not iterable"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{"  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                    "  20.      __traceback_hidden_variables__ = True", 
                    "  21.  ", "  22.      try:", 
                    Item[
                    "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  24.      except Exception as export_exception:", 
                    "  25.          try:", "  26.              try:", 
                    "  27.  ", 
                    "  28.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  29.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "handle_message"}], 
                    Column[{
                    
                    Column[{" 130.  ", " 131.  ", 
                    " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                    " 134.      __traceback_hidden_variables__ = True", 
                    " 135.  ", 
                    " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Item[
                    " 137.      result = evaluate_message(**message)", 
                    Background -> LightYellow], " 138.  ", 
                    " 139.      sys.stdout.flush()", 
                    " 140.      return result", " 141.  ", " 142.  ", 
                    " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
                    "evaluate_message"}], 
                    Column[{
                    
                    Column[{" 116.  ", 
                    " 117.      if isinstance(input, six.string_types):", 
                    " 118.          result = execute_from_string(input, \
**opts)", " 119.  ", " 120.      if isinstance(args, (list, tuple)):", 
                    " 121.          # then we have a function call to do", 
                    " 122.          # first get the function object we need \
to call", 
                    Item[
                    " 123.          result = result(*args)", Background -> 
                    LightYellow], " 124.  ", 
                    " 125.      if return_type == \"string\":", 
                    " 126.          # bug 354267 repr returns a 'str' even on \
py2 (i.e. bytes).", " 127.          result = force_text(repr(result))", 
                    " 128.  ", " 129.      return result"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
                    OpenerView[{"importyaml", 
                    Column[{
                    Column[{
                    Item["   5.  importyaml", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "file", "/Users/arnoudb/out.yaml"}, {
                    "stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless"], " in ", "load"}], 
                    Column[{
                    
                    Column[{"  74.  def load(stream, Loader):", 
                    "  75.      \"\"\"", 
                    "  76.      Parse the first YAML document in a stream", 
                    "  77.      and produce the corresponding Python object.",
                     "  78.      \"\"\"", 
                    "  79.      loader = Loader(stream)", "  80.      try:", 
                    Item[
                    "  81.          return loader.get_single_data()", 
                    Background -> LightYellow], "  82.      finally:", 
                    "  83.          loader.dispose()", "  84.  ", 
                    "  85.  def load_all(stream, Loader):", 
                    "  86.      \"\"\"", 
                    "  87.      Parse all YAML documents in a stream"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "stream", 
                    "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}, {"Loader", "<class 'yaml.loader.Loader'>"}, {
                    "loader", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "get_single_data"}], 
                    Column[{
                    
                    Column[{"  44.          if self.check_node():", 
                    "  45.              return \
self.construct_document(self.get_node())", "  46.  ", 
                    "  47.      def get_single_data(self):", 
                    "  48.          # Ensure that the stream contains a \
single document and construct it.", 
                    "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    Item[
                    "  51.              return self.construct_document(node)",
                     Background -> LightYellow], "  52.          return None",
                     "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    "  55.          data = self.construct_object(node)", 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_document"}], 
                    Column[{
                    
                    Column[{
                    "  48.          # Ensure that the stream contains a \
single document and construct it.", 
                    "  49.          node = self.get_single_node()", 
                    "  50.          if node is not None:", 
                    "  51.              return self.construct_document(node)",
                     "  52.          return None", "  53.  ", 
                    "  54.      def construct_document(self, node):", 
                    Item[
                    "  55.          data = self.construct_object(node)", 
                    Background -> LightYellow], 
                    "  56.          while self.state_generators:", 
                    "  57.              state_generators = \
self.state_generators", "  58.              self.state_generators = []", 
                    "  59.              for generator in state_generators:", 
                    "  60.                  for dummy in generator:", 
                    "  61.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_tuple"}], 
                    Column[{
                    
                    Column[{
                    " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<list_iterator object at 0x1047fa320>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_new"}], 
                    Column[{
                    
                    Column[{" 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_apply"}], 
                    Column[{
                    
                    Column[{
                    " 635.          if isinstance(node, SequenceNode):", 
                    " 636.              args = self.construct_sequence(node, \
deep=True)", " 637.              kwds = {}", " 638.              state = {}", 
                    " 639.              listitems = []", 
                    " 640.              dictitems = {}", 
                    " 641.          else:", 
                    Item[
                    " 642.              value = self.construct_mapping(node, \
deep=True)", Background -> LightYellow], 
                    " 643.              args = value.get('args', [])", 
                    " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", 
                    "wolframclient.language.expression.WLFunction"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "newobj", "True"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {
                    "__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                    "deep", "True"}, {"mapping", "{}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', \
value='state')"}, {"value_node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "key", "state"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  93.                  elif isinstance(node, \
ScalarNode):", 
                    "  94.                      constructor = \
self.__class__.construct_scalar", 
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    Item[
                    " 100.              data = constructor(self, node)", 
                    Background -> LightYellow], " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "True"}, {"old_deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_tuple"}], 
                    Column[{
                    
                    Column[{
                    " 516.      def construct_python_long(self, node):", 
                    " 517.          return self.construct_yaml_int(node)", 
                    " 518.  ", 
                    " 519.      def construct_python_complex(self, node):", 
                    " 520.         return \
complex(self.construct_scalar(node))", " 521.  ", 
                    " 522.      def construct_python_tuple(self, node):", 
                    Item[
                    " 523.          return \
tuple(self.construct_sequence(node))", Background -> LightYellow], " 524.  ", 
                    " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                    " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                    " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                    "deep", "False"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
                    Column[{
                    
                    Column[{" 122.          return node.value", " 123.  ", 
                    " 124.      def construct_sequence(self, node, \
deep=False):", " 125.          if not isinstance(node, SequenceNode):", 
                    " 126.              raise ConstructorError(None, None,", 
                    " 127.                      \"expected a sequence node, \
but found %s\" % node.id,", " 128.                      node.start_mark)", 
                    Item[
                    " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                    " 130.                  for child in node.value]", 
                    " 131.  ", 
                    " 132.      def construct_mapping(self, node, \
deep=False):", " 133.          if not isinstance(node, MappingNode):", 
                    " 134.              raise ConstructorError(None, None,", 
                    " 135.                      \"expected a mapping node, \
but found %s\" % node.id,"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<list_iterator object at 0x1047f90f0>"}, {
                    "child", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                    " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    Item[
                    " 107.                  for dummy in generator:", 
                    Background -> LightYellow], 
                    " 108.                      pass", 
                    " 109.              else:", 
                    " 110.                  \
self.state_generators.append(generator)", 
                    " 111.          self.constructed_objects[node] = data", 
                    " 112.          del self.recursive_objects[node]", 
                    " 113.          if deep:"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function SafeConstructor.construct_yaml_map at \
0x10479ec00>"}, {"tag_suffix", "None"}, {"data", "{}"}, {
                    "generator", 
                    "<generator object SafeConstructor.construct_yaml_map at \
0x10473af80>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_yaml_map"}], 
                    Column[{
                    
                    Column[{" 406.          data = []", 
                    " 407.          yield data", 
                    " 408.          \
data.extend(self.construct_sequence(node))", " 409.  ", 
                    " 410.      def construct_yaml_map(self, node):", 
                    " 411.          data = {}", " 412.          yield data", 
                    Item[
                    " 413.          value = self.construct_mapping(node)", 
                    Background -> LightYellow], 
                    " 414.          data.update(value)", " 415.  ", 
                    " 416.      def construct_yaml_object(self, node, cls):", 
                    " 417.          data = cls.__new__(cls)", 
                    " 418.          yield data", 
                    " 419.          if hasattr(data, '__setstate__'):"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "data", "{}"}}, Background -> {Null, {LightGray}}, 
                    Alignment -> Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 211.                  index += 1", 
                    " 212.          if merge:", 
                    " 213.              node.value = merge + node.value", 
                    " 214.  ", 
                    " 215.      def construct_mapping(self, node, \
deep=False):", " 216.          if isinstance(node, MappingNode):", 
                    " 217.              self.flatten_mapping(node)", 
                    Item[
                    " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                    " 220.      def construct_yaml_null(self, node):", 
                    " 221.          self.construct_scalar(node)", 
                    " 222.          return None", " 223.  ", 
                    " 224.      bool_values = {"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {
                    "__class__", 
                    "<class 'yaml.constructor.SafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
                    
                    Column[{
                    
                    Column[{" 136.                      node.start_mark)", 
                    " 137.          mapping = {}", 
                    " 138.          for key_node, value_node in node.value:", 
                    " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                    " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                    " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                    " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                    Item[
                    " 143.              value = \
self.construct_object(value_node, deep=deep)", Background -> LightYellow], 
                    " 144.              mapping[key] = value", 
                    " 145.          return mapping", " 146.  ", 
                    " 147.      def construct_pairs(self, node, deep=False):",
                     " 148.          if not isinstance(node, MappingNode):", 
                    " 149.              raise ConstructorError(None, None,"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                    "deep", "False"}, {"mapping", "{'args': ('a', 1)}"}, {
                    "key_node", 
                    "ScalarNode(tag='tag:yaml.org,2002:str', value='head')"}, \
{"value_node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "key", "head"}, {"value", "('a', 1)"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
                    Column[{
                    
                    Column[{
                    "  95.                  elif isinstance(node, \
SequenceNode):", 
                    "  96.                      constructor = \
self.__class__.construct_sequence", 
                    "  97.                  elif isinstance(node, \
MappingNode):", 
                    "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                    " 100.              data = constructor(self, node)", 
                    " 101.          else:", 
                    Item[
                    " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                    " 103.          if isinstance(data, \
types.GeneratorType):", " 104.              generator = data", 
                    " 105.              data = next(generator)", 
                    " 106.              if self.deep_construct:", 
                    " 107.                  for dummy in generator:", 
                    " 108.                      pass"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "deep", "False"}, {
                    "constructor", 
                    "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                    "wolframclient.language.expression.WLSymbol"}, {
                    "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_new"}], 
                    Column[{
                    
                    Column[{" 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance", " 657.  ", 
                    " 658.      def construct_python_object_new(self, suffix, \
node):", 
                    Item[
                    " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                    LightYellow], " 660.  ", 
                    " 661.  FullConstructor.add_constructor(", 
                    " 662.      'tag:yaml.org,2002:python/none',", 
                    " 663.      FullConstructor.construct_yaml_null)", 
                    " 664.  ", " 665.  FullConstructor.add_constructor("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "construct_python_object_apply"}], 
                    Column[{
                    
                    Column[{" 643.              args = value.get('args', [])",
                     " 644.              kwds = value.get('kwds', {})", 
                    " 645.              state = value.get('state', {})", 
                    " 646.              listitems = value.get('listitems', \
[])", " 647.              dictitems = value.get('dictitems', {})", 
                    " 648.          instance = \
self.make_python_instance(suffix, node, args, kwds, newobj)", 
                    " 649.          if state:", 
                    Item[
                    " 650.              \
self.set_python_instance_state(instance, state)", Background -> LightYellow], 
                    " 651.          if listitems:", 
                    " 652.              instance.extend(listitems)", 
                    " 653.          if dictitems:", 
                    " 654.              for key in dictitems:", 
                    " 655.                  instance[key] = dictitems[key]", 
                    " 656.          return instance"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "suffix", "wolframclient.language.expression.WLSymbol"}, {
                    "node", 
                    "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                    "newobj", "True"}, {"args", "[]"}, {"kwds", "{}"}, {
                    "state", "(None, {'name': 'Rule'})"}, {
                    "listitems", "[]"}, {"dictitems", "{}"}, {
                    "value", "{'state': (None, {'name': 'Rule'})}"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "set_python_instance_state"}], 
                    Column[{
                    
                    Column[{
                    " 719.          return super(UnsafeConstructor, \
self).find_python_name(name, mark, unsafe=True)", " 720.  ", 
                    " 721.      def make_python_instance(self, suffix, node, \
args=None, kwds=None, newobj=False):", 
                    " 722.          return super(UnsafeConstructor, \
self).make_python_instance(", 
                    " 723.              suffix, node, args, kwds, newobj, \
unsafe=True)", " 724.  ", 
                    " 725.      def set_python_instance_state(self, instance, \
state):", 
                    Item[
                    " 726.          return super(UnsafeConstructor, \
self).set_python_instance_state(", Background -> LightYellow], 
                    " 727.              instance, state, unsafe=True)", 
                    " 728.  ", 
                    " 729.  UnsafeConstructor.add_multi_constructor(", 
                    " 730.      'tag:yaml.org,2002:python/module:',", 
                    " 731.      UnsafeConstructor.construct_python_module)", 
                    " 732.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "(None, {'name': 'Rule'})"}, {
                    "__class__", 
                    "<class 'yaml.constructor.UnsafeConstructor'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                    SystemOpen[
                    "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
                    "set_python_instance_state"}], 
                    Column[{
                    
                    Column[{" 599.              slotstate = {}", 
                    " 600.              if isinstance(state, tuple) and \
len(state) == 2:", " 601.                  state, slotstate = state", 
                    " 602.              if hasattr(instance, '__dict__'):", 
                    " 603.                  if not unsafe and state:", 
                    " 604.                      for key in state.keys():", 
                    " 605.                          \
self.check_state_key(key)", 
                    Item[
                    " 606.                  instance.__dict__.update(state)", 
                    Background -> LightYellow], 
                    " 607.              elif state:", 
                    " 608.                  slotstate.update(state)", 
                    " 609.              for key, value in slotstate.items():",
                     " 610.                  if not unsafe:", 
                    " 611.                      self.check_state_key(key)", 
                    " 612.                  setattr(instance, key, value)"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                    "instance", 
                    "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "None"}, {"unsafe", "True"}, {
                    "slotstate", "{'name': 'Rule'}"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> "'NoneType' object is not iterable", 
    "MessageParameters" :> <||>, "FailureCode" :> "TypeError", "Traceback" :> 
    OpenerView[{
       Row[{"TypeError", " ", "'NoneType' object is not iterable"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/language/\
decorators.py"]], Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", 
                "  20.      __traceback_hidden_variables__ = True", "  21.  ",
                 "  22.      try:", 
                Item[
                "  23.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  24.      except Exception as export_exception:", 
                "  25.          try:", "  26.              try:", "  27.  ", 
                "  28.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                
                "  29.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "handle_message"}], 
            Column[{
              
              Column[{" 130.  ", " 131.  ", 
                " 132.  def handle_message(socket, \
evaluate_message=evaluate_message, consumer=None):", " 133.  ", 
                " 134.      __traceback_hidden_variables__ = True", " 135.  ",
                 " 136.      message = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                Item[
                " 137.      result = evaluate_message(**message)", Background -> 
                 LightYellow], " 138.  ", " 139.      sys.stdout.flush()", 
                " 140.      return result", " 141.  ", " 142.  ", 
                " 143.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram/Mathematica/14/Mathematica.app/Contents/\
SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram/Mathematica/14/Mathematica.app/\
Contents/SystemFiles/Components/WolframClientForPython/wolframclient/utils/\
externalevaluate.py"]], Appearance -> "Frameless"], " in ", 
              "evaluate_message"}], 
            Column[{
              
              Column[{" 116.  ", 
                " 117.      if isinstance(input, six.string_types):", 
                " 118.          result = execute_from_string(input, **opts)", 
                " 119.  ", " 120.      if isinstance(args, (list, tuple)):", 
                " 121.          # then we have a function call to do", 
                " 122.          # first get the function object we need to \
call", 
                Item[
                " 123.          result = result(*args)", Background -> 
                 LightYellow], " 124.  ", 
                " 125.      if return_type == \"string\":", 
                " 126.          # bug 354267 repr returns a 'str' even on py2 \
(i.e. bytes).", " 127.          result = force_text(repr(result))", " 128.  ",
                 " 129.      return result"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray]}]}, False], 
          OpenerView[{"importyaml", 
            Column[{
              Column[{
                Item["   5.  importyaml", Background -> LightYellow]}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {"file", "/Users/arnoudb/out.yaml"}, {
                  "stream", 
                   "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/__init__\
.py"]], Appearance -> "Frameless"], " in ", "load"}], 
            Column[{
              
              Column[{"  74.  def load(stream, Loader):", "  75.      \"\"\"",
                 "  76.      Parse the first YAML document in a stream", 
                "  77.      and produce the corresponding Python object.", 
                "  78.      \"\"\"", "  79.      loader = Loader(stream)", 
                "  80.      try:", 
                Item[
                "  81.          return loader.get_single_data()", Background -> 
                 LightYellow], "  82.      finally:", 
                "  83.          loader.dispose()", "  84.  ", 
                "  85.  def load_all(stream, Loader):", "  86.      \"\"\"", 
                "  87.      Parse all YAML documents in a stream"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "stream", 
                   "<_io.TextIOWrapper name='/Users/arnoudb/out.yaml' \
mode='r' encoding='utf-8'>"}, {"Loader", "<class 'yaml.loader.Loader'>"}, {
                  "loader", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "get_single_data"}], 
            Column[{
              
              Column[{"  44.          if self.check_node():", 
                "  45.              return \
self.construct_document(self.get_node())", "  46.  ", 
                "  47.      def get_single_data(self):", 
                "  48.          # Ensure that the stream contains a single \
document and construct it.", "  49.          node = self.get_single_node()", 
                "  50.          if node is not None:", 
                Item[
                "  51.              return self.construct_document(node)", 
                 Background -> LightYellow], "  52.          return None", 
                "  53.  ", "  54.      def construct_document(self, node):", 
                "  55.          data = self.construct_object(node)", 
                "  56.          while self.state_generators:", 
                "  57.              state_generators = \
self.state_generators"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_document"}], 
            Column[{
              
              Column[{"  48.          # Ensure that the stream contains a \
single document and construct it.", 
                "  49.          node = self.get_single_node()", 
                "  50.          if node is not None:", 
                "  51.              return self.construct_document(node)", 
                "  52.          return None", "  53.  ", 
                "  54.      def construct_document(self, node):", 
                Item[
                "  55.          data = self.construct_object(node)", 
                 Background -> LightYellow], 
                "  56.          while self.state_generators:", 
                "  57.              state_generators = self.state_generators",
                 "  58.              self.state_generators = []", 
                "  59.              for generator in state_generators:", 
                "  60.                  for dummy in generator:", 
                "  61.                      pass"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
            Column[{
              
              Column[{"  93.                  elif isinstance(node, \
ScalarNode):", 
                "  94.                      constructor = \
self.__class__.construct_scalar", 
                "  95.                  elif isinstance(node, SequenceNode):",
                 "  96.                      constructor = \
self.__class__.construct_sequence", 
                "  97.                  elif isinstance(node, MappingNode):", 
                "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                Item[
                " 100.              data = constructor(self, node)", 
                 Background -> LightYellow], " 101.          else:", 
                " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                " 104.              generator = data", 
                " 105.              data = next(generator)", 
                " 106.              if self.deep_construct:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                  "deep", "False"}, {
                  "constructor", 
                   "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_tuple"}], 
            Column[{
              
              Column[{" 516.      def construct_python_long(self, node):", 
                " 517.          return self.construct_yaml_int(node)", 
                " 518.  ", 
                " 519.      def construct_python_complex(self, node):", 
                " 520.         return complex(self.construct_scalar(node))", 
                " 521.  ", 
                " 522.      def construct_python_tuple(self, node):", 
                Item[
                " 523.          return tuple(self.construct_sequence(node))", 
                 Background -> LightYellow], " 524.  ", 
                " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
            Column[{
              
              Column[{" 122.          return node.value", " 123.  ", 
                " 124.      def construct_sequence(self, node, deep=False):", 
                " 125.          if not isinstance(node, SequenceNode):", 
                " 126.              raise ConstructorError(None, None,", 
                " 127.                      \"expected a sequence node, but \
found %s\" % node.id,", " 128.                      node.start_mark)", 
                Item[
                " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                " 130.                  for child in node.value]", " 131.  ", 
                " 132.      def construct_mapping(self, node, deep=False):", 
                " 133.          if not isinstance(node, MappingNode):", 
                " 134.              raise ConstructorError(None, None,", 
                " 135.                      \"expected a mapping node, but \
found %s\" % node.id,"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.\
language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])])"}, {
                  "deep", "False"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
            Column[{
              
              Column[{" 122.          return node.value", " 123.  ", 
                " 124.      def construct_sequence(self, node, deep=False):", 
                " 125.          if not isinstance(node, SequenceNode):", 
                " 126.              raise ConstructorError(None, None,", 
                " 127.                      \"expected a sequence node, but \
found %s\" % node.id,", " 128.                      node.start_mark)", 
                Item[
                " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                " 130.                  for child in node.value]", " 131.  ", 
                " 132.      def construct_mapping(self, node, deep=False):", 
                " 133.          if not isinstance(node, MappingNode):", 
                " 134.              raise ConstructorError(None, None,", 
                " 135.                      \"expected a mapping node, but \
found %s\" % node.id,"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<list_iterator object at 0x1047fa320>"}, {
                  "child", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                  "deep", "False"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
            Column[{
              
              Column[{"  95.                  elif isinstance(node, \
SequenceNode):", 
                "  96.                      constructor = \
self.__class__.construct_sequence", 
                "  97.                  elif isinstance(node, MappingNode):", 
                "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                " 100.              data = constructor(self, node)", 
                " 101.          else:", 
                Item[
                " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                " 103.          if isinstance(data, types.GeneratorType):", 
                " 104.              generator = data", 
                " 105.              data = next(generator)", 
                " 106.              if self.deep_construct:", 
                " 107.                  for dummy in generator:", 
                " 108.                      pass"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                  "deep", "False"}, {
                  "constructor", 
                   "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                   "wolframclient.language.expression.WLFunction"}, {
                  "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_object_new"}], 
            Column[{
              
              Column[{" 652.              instance.extend(listitems)", 
                " 653.          if dictitems:", 
                " 654.              for key in dictitems:", 
                " 655.                  instance[key] = dictitems[key]", 
                " 656.          return instance", " 657.  ", 
                " 658.      def construct_python_object_new(self, suffix, \
node):", 
                Item[
                " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                 LightYellow], " 660.  ", 
                " 661.  FullConstructor.add_constructor(", 
                " 662.      'tag:yaml.org,2002:python/none',", 
                " 663.      FullConstructor.construct_yaml_null)", " 664.  ", 
                " 665.  FullConstructor.add_constructor("}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "suffix", "wolframclient.language.expression.WLFunction"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_object_apply"}], 
            Column[{
              
              Column[{" 635.          if isinstance(node, SequenceNode):", 
                " 636.              args = self.construct_sequence(node, \
deep=True)", " 637.              kwds = {}", " 638.              state = {}", 
                " 639.              listitems = []", 
                " 640.              dictitems = {}", " 641.          else:", 
                Item[
                " 642.              value = self.construct_mapping(node, \
deep=True)", Background -> LightYellow], 
                " 643.              args = value.get('args', [])", 
                " 644.              kwds = value.get('kwds', {})", 
                " 645.              state = value.get('state', {})", 
                " 646.              listitems = value.get('listitems', [])", 
                " 647.              dictitems = value.get('dictitems', {})", 
                " 648.          instance = self.make_python_instance(suffix, \
node, args, kwds, newobj)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "suffix", "wolframclient.language.expression.WLFunction"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                  "newobj", "True"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
            
            Column[{
              
              Column[{" 211.                  index += 1", 
                " 212.          if merge:", 
                " 213.              node.value = merge + node.value", 
                " 214.  ", 
                " 215.      def construct_mapping(self, node, deep=False):", 
                " 216.          if isinstance(node, MappingNode):", 
                " 217.              self.flatten_mapping(node)", 
                Item[
                " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                " 220.      def construct_yaml_null(self, node):", 
                " 221.          self.construct_scalar(node)", 
                " 222.          return None", " 223.  ", 
                " 224.      bool_values = {"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                  "deep", "True"}, {
                  "__class__", "<class 'yaml.constructor.SafeConstructor'>"}},
                  Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
            
            Column[{
              
              Column[{" 136.                      node.start_mark)", 
                " 137.          mapping = {}", 
                " 138.          for key_node, value_node in node.value:", 
                " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                Item[
                " 143.              value = self.construct_object(value_node, \
deep=deep)", Background -> LightYellow], 
                " 144.              mapping[key] = value", 
                " 145.          return mapping", " 146.  ", 
                " 147.      def construct_pairs(self, node, deep=False):", 
                " 148.          if not isinstance(node, MappingNode):", 
                " 149.              raise ConstructorError(None, None,"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLFunction', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])]))])"}, {
                  "deep", "True"}, {"mapping", "{}"}, {
                  "key_node", 
                   "ScalarNode(tag='tag:yaml.org,2002:str', value='state')"}, \
{"value_node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                  "key", "state"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
            Column[{
              
              Column[{"  93.                  elif isinstance(node, \
ScalarNode):", 
                "  94.                      constructor = \
self.__class__.construct_scalar", 
                "  95.                  elif isinstance(node, SequenceNode):",
                 "  96.                      constructor = \
self.__class__.construct_sequence", 
                "  97.                  elif isinstance(node, MappingNode):", 
                "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                Item[
                " 100.              data = constructor(self, node)", 
                 Background -> LightYellow], " 101.          else:", 
                " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                " 104.              generator = data", 
                " 105.              data = next(generator)", 
                " 106.              if self.deep_construct:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                  "deep", "True"}, {"old_deep", "False"}, {
                  "constructor", 
                   "<function FullConstructor.construct_python_tuple at \
0x10479f2e0>"}, {"tag_suffix", "None"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_tuple"}], 
            Column[{
              
              Column[{" 516.      def construct_python_long(self, node):", 
                " 517.          return self.construct_yaml_int(node)", 
                " 518.  ", 
                " 519.      def construct_python_complex(self, node):", 
                " 520.         return complex(self.construct_scalar(node))", 
                " 521.  ", 
                " 522.      def construct_python_tuple(self, node):", 
                Item[
                " 523.          return tuple(self.construct_sequence(node))", 
                 Background -> LightYellow], " 524.  ", 
                " 525.      def find_python_module(self, name, mark, \
unsafe=False):", " 526.          if not name:", 
                " 527.              raise ConstructorError(\"while \
constructing a Python module\", mark,", 
                " 528.                      \"expected non-empty name \
appended to the tag\", mark)", " 529.          if unsafe:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_sequence"}], 
            Column[{
              
              Column[{" 122.          return node.value", " 123.  ", 
                " 124.      def construct_sequence(self, node, deep=False):", 
                " 125.          if not isinstance(node, SequenceNode):", 
                " 126.              raise ConstructorError(None, None,", 
                " 127.                      \"expected a sequence node, but \
found %s\" % node.id,", " 128.                      node.start_mark)", 
                Item[
                " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                " 130.                  for child in node.value]", " 131.  ", 
                " 132.      def construct_mapping(self, node, deep=False):", 
                " 133.          if not isinstance(node, MappingNode):", 
                " 134.              raise ConstructorError(None, None,", 
                " 135.                      \"expected a mapping node, but \
found %s\" % node.id,"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])])"}, {
                  "deep", "False"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "<listcomp>"}], 
            Column[{
              
              Column[{" 122.          return node.value", " 123.  ", 
                " 124.      def construct_sequence(self, node, deep=False):", 
                " 125.          if not isinstance(node, SequenceNode):", 
                " 126.              raise ConstructorError(None, None,", 
                " 127.                      \"expected a sequence node, but \
found %s\" % node.id,", " 128.                      node.start_mark)", 
                Item[
                " 129.          return [self.construct_object(child, \
deep=deep)", Background -> LightYellow], 
                " 130.                  for child in node.value]", " 131.  ", 
                " 132.      def construct_mapping(self, node, deep=False):", 
                " 133.          if not isinstance(node, MappingNode):", 
                " 134.              raise ConstructorError(None, None,", 
                " 135.                      \"expected a mapping node, but \
found %s\" % node.id,"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<list_iterator object at 0x1047f90f0>"}, {
                  "child", 
                   "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                  "deep", "False"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
            Column[{
              
              Column[{" 100.              data = constructor(self, node)", 
                " 101.          else:", 
                " 102.              data = constructor(self, tag_suffix, \
node)", " 103.          if isinstance(data, types.GeneratorType):", 
                " 104.              generator = data", 
                " 105.              data = next(generator)", 
                " 106.              if self.deep_construct:", 
                Item[
                " 107.                  for dummy in generator:", Background -> 
                 LightYellow], " 108.                      pass", 
                " 109.              else:", 
                " 110.                  \
self.state_generators.append(generator)", 
                " 111.          self.constructed_objects[node] = data", 
                " 112.          del self.recursive_objects[node]", 
                " 113.          if deep:"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                  "deep", "False"}, {
                  "constructor", 
                   "<function SafeConstructor.construct_yaml_map at \
0x10479ec00>"}, {"tag_suffix", "None"}, {"data", "{}"}, {
                  "generator", 
                   "<generator object SafeConstructor.construct_yaml_map at \
0x10473af80>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_yaml_map"}], 
            Column[{
              
              Column[{" 406.          data = []", " 407.          yield data",
                 " 408.          data.extend(self.construct_sequence(node))", 
                " 409.  ", " 410.      def construct_yaml_map(self, node):", 
                " 411.          data = {}", " 412.          yield data", 
                Item[
                " 413.          value = self.construct_mapping(node)", 
                 Background -> LightYellow], 
                " 414.          data.update(value)", " 415.  ", 
                " 416.      def construct_yaml_object(self, node, cls):", 
                " 417.          data = cls.__new__(cls)", 
                " 418.          yield data", 
                " 419.          if hasattr(data, '__setstate__'):"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                  "data", "{}"}}, Background -> {Null, {LightGray}}, 
                 Alignment -> Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
            
            Column[{
              
              Column[{" 211.                  index += 1", 
                " 212.          if merge:", 
                " 213.              node.value = merge + node.value", 
                " 214.  ", 
                " 215.      def construct_mapping(self, node, deep=False):", 
                " 216.          if isinstance(node, MappingNode):", 
                " 217.              self.flatten_mapping(node)", 
                Item[
                " 218.          return super().construct_mapping(node, \
deep=deep)", Background -> LightYellow], " 219.  ", 
                " 220.      def construct_yaml_null(self, node):", 
                " 221.          self.construct_scalar(node)", 
                " 222.          return None", " 223.  ", 
                " 224.      bool_values = {"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                  "deep", "False"}, {
                  "__class__", "<class 'yaml.constructor.SafeConstructor'>"}},
                  Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_mapping"}], 
            
            Column[{
              
              Column[{" 136.                      node.start_mark)", 
                " 137.          mapping = {}", 
                " 138.          for key_node, value_node in node.value:", 
                " 139.              key = self.construct_object(key_node, \
deep=deep)", 
                " 140.              if not isinstance(key, \
collections.abc.Hashable):", 
                " 141.                  raise ConstructorError(\"while \
constructing a mapping\", node.start_mark,", 
                " 142.                          \"found unhashable key\", \
key_node.start_mark)", 
                Item[
                " 143.              value = self.construct_object(value_node, \
deep=deep)", Background -> LightYellow], 
                " 144.              mapping[key] = value", 
                " 145.          return mapping", " 146.  ", 
                " 147.      def construct_pairs(self, node, deep=False):", 
                " 148.          if not isinstance(node, MappingNode):", 
                " 149.              raise ConstructorError(None, None,"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='args'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:str', value='a'), \
ScalarNode(tag='tag:yaml.org,2002:int', value='1')])), \
(ScalarNode(tag='tag:yaml.org,2002:str', value='head'), \
MappingNode(tag='tag:yaml.org,2002:python/object/new:wolframclient.language.\
expression.WLSymbol', value=[(ScalarNode(tag='tag:yaml.org,2002:str', \
value='state'), SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))]))])"}, {
                  "deep", "False"}, {"mapping", "{'args': ('a', 1)}"}, {
                  "key_node", 
                   "ScalarNode(tag='tag:yaml.org,2002:str', value='head')"}, {
                  "value_node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                  "key", "head"}, {"value", "('a', 1)"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", "construct_object"}], 
            Column[{
              
              Column[{"  95.                  elif isinstance(node, \
SequenceNode):", 
                "  96.                      constructor = \
self.__class__.construct_sequence", 
                "  97.                  elif isinstance(node, MappingNode):", 
                "  98.                      constructor = \
self.__class__.construct_mapping", "  99.          if tag_suffix is None:", 
                " 100.              data = constructor(self, node)", 
                " 101.          else:", 
                Item[
                " 102.              data = constructor(self, tag_suffix, \
node)", Background -> LightYellow], 
                " 103.          if isinstance(data, types.GeneratorType):", 
                " 104.              generator = data", 
                " 105.              data = next(generator)", 
                " 106.              if self.deep_construct:", 
                " 107.                  for dummy in generator:", 
                " 108.                      pass"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                  "deep", "False"}, {
                  "constructor", 
                   "<function FullConstructor.construct_python_object_new at \
0x10479f880>"}, {"tag_suffix", 
                   "wolframclient.language.expression.WLSymbol"}, {
                  "tag_prefix", "tag:yaml.org,2002:python/object/new:"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_object_new"}], 
            Column[{
              
              Column[{" 652.              instance.extend(listitems)", 
                " 653.          if dictitems:", 
                " 654.              for key in dictitems:", 
                " 655.                  instance[key] = dictitems[key]", 
                " 656.          return instance", " 657.  ", 
                " 658.      def construct_python_object_new(self, suffix, \
node):", 
                Item[
                
                " 659.          return \
self.construct_python_object_apply(suffix, node, newobj=True)", Background -> 
                 LightYellow], " 660.  ", 
                " 661.  FullConstructor.add_constructor(", 
                " 662.      'tag:yaml.org,2002:python/none',", 
                " 663.      FullConstructor.construct_yaml_null)", " 664.  ", 
                " 665.  FullConstructor.add_constructor("}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "suffix", "wolframclient.language.expression.WLSymbol"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "construct_python_object_apply"}], 
            Column[{
              
              Column[{" 643.              args = value.get('args', [])", 
                " 644.              kwds = value.get('kwds', {})", 
                " 645.              state = value.get('state', {})", 
                " 646.              listitems = value.get('listitems', [])", 
                " 647.              dictitems = value.get('dictitems', {})", 
                " 648.          instance = self.make_python_instance(suffix, \
node, args, kwds, newobj)", " 649.          if state:", 
                Item[
                " 650.              self.set_python_instance_state(instance, \
state)", Background -> LightYellow], " 651.          if listitems:", 
                " 652.              instance.extend(listitems)", 
                " 653.          if dictitems:", 
                " 654.              for key in dictitems:", 
                " 655.                  instance[key] = dictitems[key]", 
                " 656.          return instance"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "suffix", "wolframclient.language.expression.WLSymbol"}, {
                  "node", 
                   "MappingNode(tag='tag:yaml.org,2002:python/object/new:\
wolframclient.language.expression.WLSymbol', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='state'), \
SequenceNode(tag='tag:yaml.org,2002:python/tuple', \
value=[ScalarNode(tag='tag:yaml.org,2002:null', value='null'), \
MappingNode(tag='tag:yaml.org,2002:map', \
value=[(ScalarNode(tag='tag:yaml.org,2002:str', value='name'), \
ScalarNode(tag='tag:yaml.org,2002:str', value='Rule'))])]))])"}, {
                  "newobj", "True"}, {"args", "[]"}, {"kwds", "{}"}, {
                  "state", "(None, {'name': 'Rule'})"}, {"listitems", "[]"}, {
                  "dictitems", "{}"}, {
                  "value", "{'state': (None, {'name': 'Rule'})}"}, {
                  "instance", 
                   "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}}, Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "set_python_instance_state"}], 
            Column[{
              
              Column[{" 719.          return super(UnsafeConstructor, \
self).find_python_name(name, mark, unsafe=True)", " 720.  ", 
                " 721.      def make_python_instance(self, suffix, node, \
args=None, kwds=None, newobj=False):", 
                " 722.          return super(UnsafeConstructor, \
self).make_python_instance(", 
                " 723.              suffix, node, args, kwds, newobj, \
unsafe=True)", " 724.  ", 
                " 725.      def set_python_instance_state(self, instance, \
state):", 
                Item[
                " 726.          return super(UnsafeConstructor, \
self).set_python_instance_state(", Background -> LightYellow], 
                " 727.              instance, state, unsafe=True)", " 728.  ",
                 " 729.  UnsafeConstructor.add_multi_constructor(", 
                " 730.      'tag:yaml.org,2002:python/module:',", 
                " 731.      UnsafeConstructor.construct_python_module)", 
                " 732.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "instance", 
                   "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "(None, {'name': 'Rule'})"}, {
                  "__class__", 
                   "<class 'yaml.constructor.UnsafeConstructor'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"], 
                SystemOpen[
                "/Users/arnoudb/Library/Mathematica/ApplicationData/\
ExternalEvaluate/Python/Venv/PyYAML/lib/python3.11/site-packages/yaml/\
constructor.py"]], Appearance -> "Frameless"], " in ", 
              "set_python_instance_state"}], 
            Column[{
              
              Column[{" 599.              slotstate = {}", 
                " 600.              if isinstance(state, tuple) and \
len(state) == 2:", " 601.                  state, slotstate = state", 
                " 602.              if hasattr(instance, '__dict__'):", 
                " 603.                  if not unsafe and state:", 
                " 604.                      for key in state.keys():", 
                " 605.                          self.check_state_key(key)", 
                Item[
                " 606.                  instance.__dict__.update(state)", 
                 Background -> LightYellow], " 607.              elif state:",
                 " 608.                  slotstate.update(state)", 
                " 609.              for key, value in slotstate.items():", 
                " 610.                  if not unsafe:", 
                " 611.                      self.check_state_key(key)", 
                " 612.                  setattr(instance, key, value)"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<yaml.loader.Loader object at 0x1045ab6d0>"}, {
                  "instance", 
                   "<unprintable obj: 'WLSymbol' object has no attribute \
'name'>"}, {"state", "None"}, {"unsafe", "True"}, {
                  "slotstate", "{'name': 'Rule'}"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True]}], FontFamily -> "Courier"]}, True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.918227012604788*^9, 3.918231487948311*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"c727eccb-10d0-4a61-9cd4-38becb05ae50"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"ExternalEvaluate", "[", 
  RowBox[{"session", ",", 
   RowBox[{"\"\<exportyaml\>\"", "->", 
    RowBox[{"{", 
     RowBox[{"\"\</Users/arnoudb/out.yaml\>\"", ",", 
      RowBox[{"<|", 
       RowBox[{"\"\<a\>\"", "->", "1"}], "|>"}]}], "}"}]}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.918226992961768*^9, 3.918227011952046*^9}, {
  3.9182320393227367`*^9, 3.918232056870821*^9}, {3.918232131178377*^9, 
  3.918232141913756*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"dd015883-0d4d-4d05-a7c4-4240998415f2"],

Cell[BoxData[
 RowBox[{" ", 
  RowBox[{"\[LeftAssociation]", 
   RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], "\[RightAssociation]"}]}]], "Input",\

 CellChangeTimes->{{3.918232218462885*^9, 
  3.91823221846567*^9}},ExpressionUUID->"176cb8c1-004a-42b4-9741-\
8e75a1cd435a"],

Cell[BoxData[
 RowBox[{" ", "\"\<{\\\"a\\\": 1}\>\""}]], "Input",
 CellChangeTimes->{{3.9182322016029587`*^9, 
  3.918232201605179*^9}},ExpressionUUID->"4182e529-7ca0-4e8f-a57c-\
3f76a215754e"]
},
WindowSize->{1440, 847},
WindowMargins->{{-350, Automatic}, {Automatic, -983}},
FrontEndVersion->"14.0 for Mac OS X ARM (64-bit) (December 12, 2023)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b7f940ef-b8a2-4386-bb82-029be9c0f289"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[554, 20, 179, 2, 30, "Input",ExpressionUUID->"b56d3844-6acd-4fe4-b2fc-18aa3827c100"],
Cell[CellGroupData[{
Cell[758, 26, 332, 5, 30, "Input",ExpressionUUID->"ec7d7c1d-9910-4e3e-bfcd-4ca7d4a139ab"],
Cell[1093, 33, 388, 6, 34, "Output",ExpressionUUID->"fa41b372-f610-474b-bafb-70dc6cef8dd3"]
}, Open  ]],
Cell[1496, 42, 288, 5, 30, "Input",ExpressionUUID->"ebb6d589-c93d-4ce4-b7fe-9e3853922e16"],
Cell[CellGroupData[{
Cell[1809, 51, 392, 8, 30, "Input",ExpressionUUID->"a3b0201a-3785-4d9a-902f-331c36ea9bce"],
Cell[2204, 61, 253, 3, 34, "Output",ExpressionUUID->"0e9b14df-f080-4a93-91cc-13aef256d1d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2494, 69, 245, 4, 30, "Input",ExpressionUUID->"3d06829f-984f-4da9-9753-16e3c46fe18b"],
Cell[2742, 75, 244333, 4212, 566, "Output",ExpressionUUID->"ef284cad-75fb-4e69-888e-801ba3aa0e2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247112, 4292, 578, 10, 30, "Input",ExpressionUUID->"30a0947b-f19f-46bc-9420-21fde3fdb599"],
Cell[247693, 4304, 40109, 729, 173, "Output",ExpressionUUID->"8a6b6466-787e-4ff1-903e-8d7c97ee78c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[287839, 5038, 208, 3, 30, "Input",ExpressionUUID->"aa9841b6-e0d9-4704-aaaa-8e24697c8e7b"],
Cell[288050, 5043, 1431, 32, 56, "Output",ExpressionUUID->"eca6aa9b-3e73-4d69-a69a-fad7bccc29ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[289518, 5080, 174, 2, 30, "Input",ExpressionUUID->"a00b6371-3e59-4b77-9430-9f2b944c16cc"],
Cell[289695, 5084, 39390, 719, 173, "Output",ExpressionUUID->"031bdab8-01bf-48e6-9a60-719f372f1e77"]
}, Open  ]],
Cell[329100, 5806, 503, 8, 30, "Input",ExpressionUUID->"bcd79d83-eccc-4ef0-a765-5d5a3ba5943a"],
Cell[329606, 5816, 806, 15, 30, "Input",ExpressionUUID->"5b02526d-62da-487f-a3c5-17d2cda74b2a"],
Cell[CellGroupData[{
Cell[330437, 5835, 365, 8, 30, "Input",ExpressionUUID->"f11ddab1-f60d-43b4-a948-135f7127377a"],
Cell[330805, 5845, 317, 7, 34, "Output",ExpressionUUID->"bfc90403-49ed-4c58-a014-65618987efea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331159, 5857, 239, 4, 30, "Input",ExpressionUUID->"ff30cb37-4294-44f0-864b-2895fa14396c"],
Cell[331401, 5863, 186, 8, 58, "Print",ExpressionUUID->"c0319453-adac-41b8-90f3-26b145765538"]
}, Open  ]],
Cell[CellGroupData[{
Cell[331624, 5876, 240, 4, 30, "Input",ExpressionUUID->"da0fc769-c345-42c9-a05c-31c7130ae94f"],
Cell[331867, 5882, 112405, 2089, 65, "Output",ExpressionUUID->"77fb7191-a3b7-4c11-8bef-839cb82609c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444309, 7976, 266, 5, 30, "Input",ExpressionUUID->"683b20bb-f777-4a8b-8af0-06695596c3e4"],
Cell[444578, 7983, 44624, 859, 64, "Output",ExpressionUUID->"f662a262-2dfa-46bf-9b6f-dda93655c4a4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[489239, 8847, 371, 7, 30, "Input",ExpressionUUID->"a3430444-42ab-4836-88e8-d1a31375599f"],
Cell[489613, 8856, 583074, 10496, 63, "Output",ExpressionUUID->"c727eccb-10d0-4a61-9cd4-38becb05ae50"]
}, Open  ]],
Cell[1072702, 19355, 533, 12, 30, "Input",ExpressionUUID->"dd015883-0d4d-4d05-a7c4-4240998415f2"],
Cell[1073238, 19369, 267, 7, 30, "Input",ExpressionUUID->"176cb8c1-004a-42b4-9741-8e75a1cd435a"],
Cell[1073508, 19378, 193, 4, 30, "Input",ExpressionUUID->"4182e529-7ca0-4e8f-a57c-3f76a215754e"]
}
]
*)

